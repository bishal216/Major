6. Component Based Software Engineering
                                                                                                              -  Amir  & Anuj
6.1 Component and Component Model
* A component is a s/w unit whose functionality and dependencies and completely defined by a set of public interface.
* Components can be composed with other components without knowledge of their implementation & can be deployed as an executable unit.
According g to Szyperski:
* A software component is a unit of composition with contractually specified interfaces and explicit context dependencies only. A software component can be deployed independently and is subject to composition by third-parties.
According to Councill and Heinemann:
* A software component is a software element that conforms to a component model and can be independently deployed and composed without modification according to a composition standard.]
Component characteristics
• Standardised – Following a standard component model
• Independent – Usable without Adaptors
• Compostable – External interactions use public interface
• Deployable – Stand-alone entity
• Documented – Full Documentation
Components have two related interface
i. Provides interface defines the services provided by the component.
ii. Requires interface specifies what services must be provide by other components in the
               system if a component is to operate correctly

Fig: A component

Component Model
* Defines a set of standards for components, including interfaces standard, usage standards and deployment standards.

Fig: Basic Elements of Component Model
2 categories of service provided 
i. Platform service:
Which enables components to communicate & interoperate in a distributed environment?
ii. Support service:
Which are common services that are likely to be required by many different components

6.2 The CBSE process
• Component-based software engineering (CBSE) is an approach to software development that relies on software reuse.
• CBSE emerged from the failure of object-oriented development to support effective reuse. Single object classes are too detailed and specific.
• Components are more abstract than objects and classes. Thus, they can be considered to be stand-alone service providers.
• CBSE requires knowledge, careful planning, and methodological support.
• CBSE is inteneded to provide an effective and efficient means for reuse, by building systems out of existing parts or components. Figuratively, the idea is comparable to that of lego bricks which can be used to develop a number of different „applications“ from a standard set of components. This will not only reduce the effort needed for system development but will also have a positive impact on the costs involved. Also this sounds easy the general idea is not new but hasn‘t been succesfully realized yet. Effective reuse was/is also one of the major promises of OO. However, classes and objects are often too specific and fine-grained to be effectively reused (e.g., single operations instead of applications). The idea of CBSE is to raise the level of abstartcion of reusable entites. Thus tehy can be seen as standalone entittes or in other words: One man‘s component can be another mans system. Although this sounds easy, ist practical application requires knowledge (oprovided services, side effects, providwers, market, …, etc.),careful planning (risks, impacts on the system, etc.) and methodological support applying sound engineering practices. Otherwise CBSE is likely to fail.
CBSE and design principles
• Apart from the reuse, CBSE is based on sound software engineering principles:
> Component  are independent                           
?do not interfere with each other;
> Component implementations are hidden;
> Communication is through well-defined interfaces;
> Component platforms are shared and reduce development costs.
> Component interfaces and application are „standardized“ to ease application
 CBSE process
• When reusing components, it is essential to make trade-offs between ideal requirements and the services actually provided by available components.
• This involves:
> Developing outline requirements;
> Searching for components then modifying requirements according to available functionality.
> Searching again to find if there are better components that meet the revised requirements.



fig.1 CBSE process reuse
This figure shows the ideal/general  process for CBSE without showing iterations and feedback loops.In practice there are many loops and feedback cycles (….), However, the principal sequence is the same.

There are s/w process that support component based s/w engineers
2 types of CBSE process are:
1. Development for reuse: Concerned with developing components that will be reused in other application.
2. Development with reuse: Process of developing new application using existing components and services.
Supporting Process:
1. Component acquisition
2. Component management
3. Component certification
6.3 Component Composition
Component composition is the process of integrating components with each other, and specially written ‘glue code’ to create a system or another component.
Types
1. Sequential composition
We can create new component from two existing component s by calling the exixting component in sequence.
2. Hierarchical composition
This type of composition occurs when one component calls directly on the services provided by another component.
3. Additive composition 
This occurs when two or more component are put together to create a new component, which combine their functionality.
When composing reusable components that have not been written for specific application, one may need to write adaptors or ‘glue code’ to reconcile the different component interfaces.
Three types of incompatibility can occur
i. Parameter incompatibility
ii. Operator incompatibility
iii. Operator incompleteness
