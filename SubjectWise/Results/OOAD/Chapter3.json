[{"question": "What are the main concepts of patterns?", "answer": "References: • Applying UML and patterns Craig Larman What are patterns?", "marks": "4"},
{"question": "What is the meaning of a pattern?", "answer": "Context: This tells us the pattern's applicability.", "marks": "2"},
{"question": "What are the main concepts of patterns?", "answer": "and implementation.", "marks": "2"},
{"question": "What is the difference between patterns and frameworks?", "answer": "” (Pree, 1994) • “Design patterns focus more on reuse of recurring architectural design themes, while frameworks focus on detailed design.", "marks": "4"},
{"question": "What is the definition of a pattern?", "answer": "Forces: A description of the relevant forces and constraints and how they interact/conflict with one another.", "marks": "2"},
{"question": "What is the meaning of patterns?", "answer": "• “A pattern addresses a recurring design problem that arises in specific design situations and presents a solution to it” (Buschmann, et.", "marks": "2"},
{"question": "What is the definition of a pattern?", "answer": "Describing patterns Name : It must have a meaningful name.", "marks": "2"},
{"question": "What is the meaning of pattern?", "answer": "Problem: A statement of the problem.", "marks": "2"},
{"question": "What is the purpose of the book?", "answer": "Result: Facilitate reuse of object-oriented code between projects and between programmers.", "marks": "2"},
{"question": "What is a pattern?", "answer": "Design Patterns Provides a scheme for refining the subsystems or components of a software system, or the relationships between them.", "marks": "2"},
{"question": "What is the meaning of patterns?", "answer": "• Principles and solutions codified in a structured format describing a problem and a solution • A named problem/solution pair that can be applied in new contexts • It is advice from previous designers to help designers in new situations The idea behind design patterns is simple: Write down and catalog common interactions between objects that programmers have frequently found useful.", "marks": "6"},
{"question": "What are some definitions of design patterns?", "answer": "Some definitions of design patterns • “Design patterns constitute a set of rules describing how to accomplish certain tasks in the realm of software development.", "marks": "2"},
{"question": "Who is the information expert?", "answer": "Only Sale knows this, so Sale is the information expert.", "marks": "2"},
{"question": "What is the most basic principle by which responsibilities are assigned in object-oriented design?", "answer": "Need all SalesLineItem instances and their subtotals.", "marks": "2"},
{"question": "What is the most basic principle by which to assign responsibility for creating a new instance of?", "answer": "Class Responsibility Sale knows sale total SalesL ineItem knows line item subtotal ProductSpecification knows product price Expert • Maintain encapsulation of information • Promotes low coupling • Promotes highly cohesive classes • Can cause a class to become excessively complex Creator Problem: Assign responsibility for creating a new instance of some class?", "marks": "3"},
{"question": "What is the definition of a class?", "answer": "Solution: Determine which class should create instances of a class based on the relationship between potential creator classes and the class to be instantiated.", "marks": "2"},
{"question": "What is the purpose of the assignment?", "answer": "• You want to assign a responsibility to a class • You want to avoid or minimize additional dependencies • You want to maximise cohesion and minimise coupling • You want to increase reuse and decrease maintenance •.", "marks": "2"},
{"question": "What is the most basic principle by which responsibilities are assigned in object-oriented design?", "answer": "Solution: Assign a responsibility to the class that has the information necessary to fulfil the responsibility.", "marks": "2"},
{"question": "What is the definition of a problem in GRASP?", "answer": "Consequences: Implications( good and bad) of using the solution.", "marks": "2"},
{"question": "What is the best way to achieve the goal of the pattern?", "answer": "Solution: Static relationships and dynamic rules describing how to realize the desired outcome.", "marks": "2"},
{"question": "What is the difference between the two?", "answer": "Hence t := total() :Sale Sale date time total() () Sale date time total() SalesLineItem quantity subtotal() Product Specification description price UPC price() But subtotals are needed for each line item(multiply quantity by price).", "marks": "3"},
{"question": "What is the definition of responsibilities in a GRASP pattern?", "answer": "Expert : Example Hence responsibilities assign to the 3 classes.", "marks": "2"}
,
{"question": "Who is responsible for knowing the grand total of a sale in a typical point of sale?", "answer": "Who is responsible for knowing the grand total of a sale in a typical Point of Sale application?", "marks": "3"},
{"question": "What is the difference between the two?", "answer": "By Expert, SalesLineItem is expert, knows quantity and has association with ProductSpecification which knows price.", "marks": "3"},
{"question": "What is the general responsibility of a class?", "answer": "GRASP Patterns Which class, in the general case is responsible?", "marks": "2"},
{"question": "What is the definition of a creator?", "answer": "Creator : Example Creator pattern suggests Sale.", "marks": "2"},
{"question": "What is the most common type of coupling?", "answer": "These typically include a parameter or local variable of type TypeY, or the object returned from a message being an instance of TypeY.", "marks": "2"},
{"question": "What is the best way to make a payment?", "answer": "Payment POST Sale Low Coupling Two possibilities: 1.", "marks": "2"},
{"question": "What is the definition of TypeX?", "answer": "• TypeX is a direct or indirect subclass of TypeY.", "marks": "2"},
{"question": "Who has responsibility to create an object?", "answer": "Creator who has responsibility to create an object?", "marks": "3"},
{"question": "What is the definition of a class that aggregates or contains sales line items?", "answer": "Look for a class that aggregates or contains SalesLineItem objects.", "marks": "2"},
{"question": "What is the solution to the high cohesion problem?", "answer": "Solution: Assign responsibilities so that cohesion remains high.", "marks": "2"},
{"question": "What is the definition of a type?", "answer": "• TypeX has a method which references an instance of TypeY, or TypeY itself, by any means.", "marks": "2"},
{"question": "What is the purpose of the collaboration diagram?", "answer": "Collaboration diagram is Creator • Promotes low coupling by making instances of a class","marks":"4"},
{"question": "What is the definition of an object-oriented program?", "answer": "An object-oriented program is described by the interaction of these objects.", "marks": 4},
{"question": "What is the definition of a design model?", "answer": "Software Architecture Document Design Model Data Model.", "marks": 2},
{"question": "What is the difference between analysis and design?", "answer": "Both analysis and design can be performed incrementally, and the artifacts can be continuously grown instead of completely developed in one shot.", "marks": 6},
{"question": "What is the definition of a conceptual model?", "answer": "The conceptual model is explicitly chosen to be independent of implementation details, such as concurrency or data storage.", "marks": 4},
{"question": "What is the focus of analysis?", "answer": "In analysis, the focus is to fully analyze the problem at hand and to model the world by discovering the classes and objects that form the vocabulary of the problem domain.", "marks": 4},
{"question": "What is the definition of a design?", "answer": "Object-oriented design is the process of planning a system of interacting objects for the purpose of solving a software problem.", "marks": 2},
{"question": "What is the definition of the object interface?", "answer": "The object interface, how the object can be interacted with, is also defined.", "marks": 2},
{"question": "What is the definition of an object?", "answer": "An object contains encapsulated data and procedures grouped together to represent an entity.", "marks": 2},
{"question": "What is the definition of a design approach?", "answer": "It is one approach to software design.", "marks": 2},
{"question": "What is the definition of a concept model?", "answer": "Some typical input artifacts for object-oriented design are: • Conceptual model: Conceptual model is the result of object-oriented analysis, it captures concepts in the problem domain.", "marks": 4},
{"question": "What is the difference between analysis and design?", "answer": "In design, we invent the abstractions and mechanisms in our models that provide the design of the solution to be built.", "marks": 2},
{"question": "What is the difference between analysis and design?", "answer": "From Requirements/Analysis to Design A set of requirements-oriented artifacts (and thought) inspire design-oriented artifacts.", "marks": 3},
{"question": "What is the difference between analysis and design?",
"answer": "Fig: Showing transition from Analysis models to Design Models Fig: The phases of OOAD and how the transition from OOA to OOD works Input (sources) for object-oriented design The input for object-oriented design is provided by the output of object-oriented analysis.",
"marks": 4
},
{"question": "What is the definition of object-oriented design?",
"answer": "Object-oriented design is the discipline of defining the objects and their interactions to solve a problem that was identified and documented during object-oriented analysis.",
"marks": 4
},
{"question": "What is the difference between analysis and design?",
"answer": "Realize that an output artifact does not need to be completely developed to serve as input of object-oriented design; analysis and design may occur in parallel, and in practice the results of one activity can feed the other in a short feedback cycle through an iterative process.",
"marks": 4
},
{"question": "What is the definition of a use case?",
"answer": "It is not mandatory to have this, but it helps to visualize the end-product and therefore helps the designer.",
"marks": 4
},
{"question": "What is the main advantage of using a design pattern?",
"answer": "By bundling a large amount of reusable code into a framework, much time is saved for the developer, since he/she is saved the task of rewriting large amounts of standard code for each new application that is developed.",
"marks": 4
},
{"question": "What is a system sequence diagram?",
"answer": "• System Sequence Diagram: System Sequence diagram (SSD) is a picture that shows, for a particular scenario of a use case, the events that external actors generate, their order, and possible inter-system events.",
"marks": 4
},
{"question": "What is a relational data model?",
"answer": "• Relational data model (if applicable): A data model is an abstract model that describes how data is represented and used.",
"marks": 4
},
{"question": "What is the meaning of use case diagrams?",
"answer": "In many circumstances use cases are further elaborated into use case diagrams.",
"marks": 4
},
{"question": "What is the definition of a framework?",
"answer": "• Define application framework (if applicable): Application framework is a term usually used to refer to a set of libraries or classes that are used to implement the standard structure of an application for a specific operating system.",
"marks": 4
},{"question": "What is the definition of a persistent object?", "answer": "Identify persistent objects/data (if applicable): Identify objects that have to last longer than a single runtime of the application.", "marks": 2},
{"question": "What is the definition of a design pattern?", "answer": "Designing concepts • Defining objects, creating class diagram from conceptual diagram: Usually map entity to class.", "marks": 4},
{"question": "What is the definition of a user interface?", "answer": "• User interface documentations (if applicable): Document that shows and describes the look and feel of the end product's user interface.", "marks": 2},
{"question": "What is the definition of a remote object?", "answer": "Identify and define remote objects (if applicable).", "marks": 2},
{"question": "What is a use case?", "answer": "Each use case provides one or more scenarios that convey how the system should interact with the users called actors to achieve a specific business goal or function.", "marks": 2},
{"question": "What is the purpose of a relational data model?", "answer": "If an object database is not used, the relational data model should usually be created before the design, since the strategy chosen for object-relational mapping is an output of the OO design process.", "marks": 4},
{"question": "What is the difference between a relational data model and an object-oriented design arti?", "answer": "However, it is possible to develop the relational data model and the object-oriented design artifacts in parallel, and the growth of an artifact can stimulate the refinement of other artifacts.", "marks": 3},
{"question": "What is a use case?", "answer": "• Use case: Use case is a description of sequences of events that, taken together, lead to a system doing something useful.", "marks": 2},
{"question": "What are the main characteristics of a design pattern?", "answer": "• Identifying attributes.", "marks": 2},
{"question": "What is a design pattern?", "answer": "• Use design patterns (if applicable): A design pattern is not a finished design, it is a description of a solution to a common problem, in a context[1].", "marks": 2},
{"question": "What is a use case diagram?", "answer": "Use case diagrams are used to identify the actor (users or other systems) and the processes they perform.", "marks": 2},
{"question": "What is a design pattern?", "answer": "It can also be thought of as a template for how to solve a problem that can be used in many different situations and/or applications.", "marks": 2},
{"question": "What is the definition of a design pattern?", "answer": "Object-oriented design patterns typically show relationships and interactions between classes or objects, without specifying the final application classes or objects that are involved.", "marks": 4},
{"question": "What is the definition of a relational database?", "answer": "If a relational database is used, design the object relation mapping.", "marks": 3},
{"question": "Who are the actors in the use case?", "answer": "Use case actors may be end users or other systems.", "marks": 2},
{"question": "What is the main advantage of using a design pattern?", "answer": "The main advantage of using a design pattern is that it can be reused in multiple applications.", "marks": 2},
{"question": "What is the difference between a class diagram and a static model?", "answer": "From mental model to code.", "marks": 3},
{"question": "What is the best way to design a UML object?", "answer": "Draw, then code.", "marks": 2},
{"question": "What is the best way to draw a UML diagram?", "answer": "Drawing some UML on a whiteboard or UML CASE tool, then switching to #1 with a textstrong IDE (e.", "marks": 4},
{"question": "What is a sequence diagram?", "answer": "A sequence diagram shows, as parallel vertical lines, different processes or objects that live simultaneously, and, as horizontal arrows, the messages exchanged between them, in the order in which they occur.", "marks": 2},
{"question": "What is the relationship between static and dynamic modeling?", "answer": "There's a relationship between static and dynamic modeling and the agile modeling practice of create models in parallel: Spend a short period of time on interaction diagrams (dynamics), then switch to a wall of related class diagrams (statics).", "marks": 4}]
