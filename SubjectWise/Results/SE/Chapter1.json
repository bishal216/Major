[   {"question":"Define software crisis.","answer":"Software crisis is the production of failed and challenged software.","marks":"2"},
    {"question":"Why do softwares fail?","answer":"Introduction of powerful computer hardware, when larger and complex software were ordered, software built is over budget, late delivery unreliable, difficult to maintain properly.","marks":"4"},
    {"question":"What are the characteristics of software?","answer":"2 Software is developed and engineered; it is not manufactures in the classical sense.  3 Software doesn't wear out: i.e. it is maintainable with the introduction of new hardware.    4 A software component should be designed and implemented so that it can be reused in many different programs.    5 Software should have all required functionality and performance for user. ","marks":"4"},
    {"question":"Explain software quality attributes.","answer":"A. Runtime System Qualities Runtime System Qualities can be measured as the system executes.    Functionality    Performance    Security    Availability    Usability    B.  Non-Runtime System Qualities    Non-Runtime System Qualities cannot be measured as the system executes.    Modifiability    Portability    Reusability    Integrability    Testability","marks":"6"},
    {"question":"List runtime software qualities.","answer":"Functionality    Performance    Security    Availability    Usability","marks":"4"},
    {"question":"List non-runtime software qualities.","answer":"Modifiability    Portability    Reusability    Integrability    Testability","marks":"4"},
    {"question":"Differentiate runtime and non-runtime software qualities.","answer":"A. Runtime System Qualities    Runtime System Qualities can be measured as the system executes.    Functionality    Performance    Security    Availability    Usability    B.  Non-Runtime System Qualities    Non-Runtime System Qualities cannot be measured as the system executes.   Modifiability    Portability    Reusability    Integrability    Testability","marks":"4"},
    {"question":"Write about SDLC.","answer":"Software Development Life Cycle","marks":"4"},
    {"question":"Explain Waterfall model.","answer": "These takes the fundamental process activities of specification, development, validation, development, ad evolution and represent them as separate process phases such as requirements specification, software design, implementation, testing, and so on.","marks":"6"},
    {"question":"Explain Incremental model.","answer": "Incremental development is based on the idea of developing an initial implementation, exposing this to user comment and evolving through several versions until and complete system has been developed.    * Interleaves the activity of specification, development & validation","marks":"6"},
    {"question":"Explain reuse-oriented software model.","answer": "Incremental development is based on the idea of eveloping an initial implementation, exposing this to user comment and evolving through several versions until and complete system has been developed.    * Interleaves the activity of specification, development & validation","marks":"6"},
    {"question":"Explain Spiral model.","answer": "In this model process is represented as spiral rather than a sequence of activities with some backtracking from one activity to another.","marks":"6"},
    {"question":"List advantages and disadvantages of Waterfall model.","answer": "Advantages    * Reflect systematic way of software process    * Useful for larger system engineering project    Disadvantages    * Inflexible artitioning of the project into distinct stages.    * Difficult to respond to changing customs requirements.","marks":"4"},
    {"question":"What are the advantages and disadvantages of Incremental model.","answer": "Advantages    * The cost of accommodating changing customer requirements is reduced.     * It is easier to get customer feedback on the development work that has been done.    * More rapid delivery and development of useful software to the customer is possible, even if all of the functionality has been included.    Disadvantages    * Hard to identify common facilities that are needed by all increments as requirement are not defined in detail at early stage.    * Difficult when replacement system  is being developed as increments do not have full functionalities    * Conflicts arises with the pro current model of organization where complete system specification is part of the system development","marks":"4"},
    {"question":" List advantages and disadvantages of  reuse-oriented software model.","answer": "Advantages    * Reduce the amount of software to be developed    * Reduces cost and risk.    * Fast delivery of the software.                      Disadvantages    * May lead to a system that does not meet the real necessary of the user requirement.    * Some control over the system evolution is lost as new as new versions of the reusable components are not under the control of the organization using them.","marks":"4"},
    {"question":"List advantages and disadvantages of Spiral model.","answer": "Advantages    * Explicit recognition of the risk.    * Flexibility to manage requirement and control changes    * Features for large business and complicated project    * Compromises both water fall model and prototype model                  Disadvantages    * Not suitable for smaller project    * Not suitable for changes that happen frequently","marks":"4"},
    {"question":"Explain process iteration.","answer":"Iteration can improve validation and verification by allowing earlier quality feedback.","marks":"4"},
    {"question":"What is the need of process iteration?","answer":"* Parts of the process are repeated as system requirement evolve.    * System design & implementation work must be reworked to implement the change requirement.    * It is alternative approach to S/w development.    * Makes the system that can do all to do little more.    * Minimize the risk of building wrong product .e.g. building a table instead of chair.    * Several development process use iteration in high level or level or both.","marks":"4"},
    {"question":"Define software processes.","answer":"A software process is a set of related activities that leads to the production of a software product.","marks":"2"},
    {"question":"What is software specification?","answer":"Software specification or requirements engineering process of the understanding & defining what services are required from the system and identifying the constraints on the system development.","marks":"2"},
    {"question":"What are the different stages in software specification?","answer":"Feasibility StudyRequirement elicitation and analysisRequirement SpecificationRequirement validation","marks":"4"},
    {"question":"Differentiate between user requirement and system requirement.","answer":"aaaa","marks":"4"},
    {"question":"List the stages of Software design and implementation.","answer":"* Architectural design    o Identification of the overall system.    o Identify the relationship between principal component    * Interface design    o Define the interfaces between system components.    * Component design    o Here we take each system component and design how it will operate.    o It may be the list of changes to be made to a reusable component or a detailed design model.    * Database design    o Design the system data structure and how they are to be represented in a database.","marks":"4"},
    {"question":"Difference between validation and verification.","answer":"","marks":"2"},
    {"question":"What is development testing?","answer":"Component making up the system are tested by the people developing the system.    o Each component is tested separately.    o Component may be simple entities such as function, object and class.","marks":"3"},
    {"question":"What is system testing","answer":"System component are integrated to create a complete system.    o Concerned with finding error that happens due to components and component interface problem.","marks":"3"},
    {"question":"What is Acceptance testing","answer":"Is the final stage in testing before the system is accepted for operational use?    o The system is tested with data supplied by a customer.    o May reveal errors and requirements problems.","marks":"3"},
    {"question":"Compare Alpha and Beta testing.","answer":"* Alpha testing: some time acceptance testing is known as alpha testing. Custom system is developed for single client. It continues until the client and developer agreed that the system is acceptable.     * Beta testing: involves delivering the system to multiple clients. They report the problem to the developer. After this developer modify it and release the system.","marks":"4"},
    {"question":"Explain CASE.","answer":"CASE tools are programs that are used to support software engineering process. These tools therefore include design editors, data dictionaries, compilers, debuggers, system building tools, etc.    * CASE tools provide process support by automating some process activities and by providing information about the software that is being developed.    * Assist in development and maintenance of software","marks":"6"},
    {"question":"What are the classes of CASE tools?","answer":"a. Business system planning    * Information engineering tools    * Process modeling and management tools        b. Project management     * Project planning tools    * Risk analysis tools    * Project management tools    * Requirement tracing tools    c. Programming tools    * Integrating and testing tools    * Client /server tools    d. Maintenance tools    * Requirement engineering tools    Specific examples:    * with class-object oriented design & code generation    * oracle designer/200-integrated CASE environment","marks":"4"},
    {"question":"What are functional and non-functional requirements?","answer":"Functional requirements specify the product capabilities, or things that a product must do for its users.Non-functional requirements define system properties such as reliability, performance, security, response time and storage requirements and constraints like Input output device capability, system representations. ","marks":"4"},
    {"question":"Differentiate functional and non-functional requirements?","answer":"Functional requirements specify the product capabilities, or things that a product must do for its users.Non-functional requirements define system properties such as reliability, performance, security, response time and storage requirements and constraints like Input output device capability, system representations. ","marks":"4"},
    {"question":"Describe user requirements","answer":"User requirements are high level statements, in a natural language with diagrams, of what the system should do and the constraints under which it must operate.    User requirements should describe functional and non-functional requirements in such a way that they are understandable by system users who don 't have detailed technical knowledge.    User requirements are defined using natural language, tables and diagrams as these can be understood by all users.","marks":"3"},
    {"question":"Describe system requirements","answer":"They are more precise than user requirements.    They are more detailed descriptions of the software system 's functions services and operational constraints.    The system requirements document should define exactly what is to be implemented.    They may be incorporated into the system contract between the system buyer and the software developers so as to define how the system should work.    They may be defined or illustrated using system models.","marks":"3"},
    {"question":"Describe interface specifications","answer":"Interface specification describes the behavior of some software unit such as function or class.    Interface specification is an important part of any design process which describes the interfaces between the components in the design.    It is required so that objects and sub functions can be designed in parallel.    It is used to document the design of future software components and the correct usage of an existing component.","marks":"3"},
    {"question":"List the characteristics of SRS.","answer":"The characteristics of a good software requirements document are    1.    Complete 2.    Consistent 3.    Correct 4.    Modifiable5.    Ranked 6.    Testable 7.    Traceable 8.    Unambiguous 9.    Valid 10.    Verifiable","marks":"8"},
    {"question":"Write short note on feasibility study.","answer":"A feasibility study is a short, focused study that is done earlier in requirement engineering process and is carried out to select the best system that meets performance requirements.     The main aim of the feasibility study activity is to determine whether it would be financially and technically feasible to develop the product.     The feasibility study activity involves the analysis of the problem and collection of all relevant information relating to the product such as the different data items which would be input to the system, the processing required to be carried out on these data, the output data required to be produced by the system as well as various constraints on the behavior of the system.    It should be relatively cheap and quick.","marks":"4"},
    {"question":"What is requirements elicitation and analysis?","answer":"It is an iterative process that can be represented as a spiral of activities  ' requirements discovery, classification and organization, negotiation with prioritization and requirements specification.","marks":"2"},
    {"question":"Why is requirements elicitation a difficult process?","answer":"a. Stakeholders often don 't know what they want from a computer system in most general terms, they may make unrealistic demands because they don 't know what is and isn 't feasible.     b.  Stakeholders in a system naturally express requirements in their own terms and with implicit knowledge of their own work. Requirements engineers, without experience in the customer 's domain may not understand these requirements.     c. Different stakeholders have different requirements and they may express these in different ways. Requirements engineers have to discover all potential sources of requirements and find the commonalities and conflict.      d. Political factors may influence the requirements of a system. Managers may demand specific system requirements because these will allow them to increase their influence in the organization.  e. The economic and business environment in which the analysis takes place is dynamic. It inevitably changes during the analysis process. The importance of particular requirements may change. New requirements may emerge from new stakeholders who were not previously consulted.","marks":"6"},
    {"question":"What are the differences between Validation and Verification?","answer":"Validation: Are we building the right product?     Verification: Are we building the product right?     Validation: The process of evaluating software during or at the end of the development process to determine whether it satisfies specified requirements.    Verification: The process of evaluating software to determine whether the products of a given development phase satisfy the conditions imposed at the start of that phase. For verifiable software, we must be able to write a set of tests that can demonstrate that the delivered system meets each specified requirement. Validation ensures that the product actually meets the user's needs, and that the specifications were correct in the first place, while verification is ensuring that the product has been built according to the requirements and design specifications.     Validation ensures that 'you built the right thing'. Verification ensures that 'you built it right'. ","marks":"8"},
    {"question":"What are the phases of good requirement engineering process?","answer":"A good requirement ngineering process consists of 4 main phases.    1. Feasibility study    2. Requirements elicitation and analysis    3. equirements specification    4. Requirements validation","marks":"4"}
    ]