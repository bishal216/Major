[{"question": "What is the definition of an object-oriented program?", "answer": "An object-oriented program is described by the interaction of these objects."}, {"question": "What is the definition of a design model?", "answer": "Software Architecture Document Design Model Data Model."}, {"question": "What is the difference between analysis and design?", "answer": "Both analysis and design can be performed incrementally, and the artifacts can be continuously grown instead of completely developed in one shot."}, {"question": "What is the difference between analysis and design?", "answer": "."}, {"question": "What is the definition of a conceptual model?", "answer": "The conceptual model is explicitly chosen to be independent of implementation details, such as concurrency or data storage."}, {"question": "What is the focus of analysis?", "answer": "In analysis, the focus is to fully analyze the problem at hand and to model the world by discovering the classes and objects that form the vocabulary of the problem domain."}, {"question": "What is the definition of a design?", "answer": "Object-oriented design is the process of planning a system of interacting objects for the purpose of solving a software problem."}, {"question": "What is the definition of the "object interface"?", "answer": "The "object interface", how the object can be interacted with, is also defined."}, {"question": "What is the definition of an object?", "answer": "An object contains encapsulated data and procedures grouped together to represent an entity."}, {"question": "What is the definition of a design approach?", "answer": "It is one approach to software design."}, {"question": "What is the difference between analysis and design?", "answer": "Chapter 3: Object Oriented Design Object Oriented Design The boundaries between analysis and design are fuzzy, although the focus of each is quite distinct."}, {"question": "What is the definition of a concept model?", "answer": "Some typical input artifacts for object-oriented design are: • Conceptual model: Conceptual model is the result of object-oriented analysis, it captures concepts in the problem domain."}, {"question": "What is the difference between analysis and design?", "answer": "In design, we invent the abstractions and mechanisms in our models that provide the design of the solution to be built."}, {"question": "What is the difference between analysis and design?", "answer": "From Requirements/Analysis to Design A set of requirements-oriented artifacts (and thought) inspire design-oriented artifacts."}, {"question": "What is the difference between analysis and design?", "answer": "Fig: Showing transition from Analysis models to Design Models Fig: The phases of OOAD and how the transition from OOA to OOD works Input (sources) for object-oriented design The input for object-oriented design is provided by the output of object-oriented analysis."}, {"question": "What is the definition of object-oriented design?", "answer": "Object-oriented design is the discipline of defining the objects and their interactions to solve a problem that was identified and documented during object-oriented analysis."}, {"question": "What is the difference between analysis and design?", "answer": "Realize that an output artifact does not need to be completely developed to serve as input of object-oriented design; analysis and design may occur in parallel, and in practice the results of one activity can feed the other in a short feedback cycle through an iterative process."}, {"question": "What is the definition of a use case?", "answer": "It is not mandatory to have this, but it helps to visualize the end-product and therefore helps the designer."}, {"question": "What is the main advantage of using a design pattern?", "answer": "By bundling a large amount of reusable code into a framework, much time is saved for the developer, since he/she is saved the task of rewriting large amounts of standard code for each new application that is developed."}, {"question": "What is a system sequence diagram?", "answer": "• System Sequence Diagram: System Sequence diagram (SSD) is a picture that shows, for a particular scenario of a use case, the events that external actors generate, their order, and possible inter-system events."}, {"question": "What is a relational data model?", "answer": "• Relational data model (if applicable): A data model is an abstract model that describes how data is represented and used."}, {"question": "What is the meaning of use case diagrams?", "answer": "In many circumstances use cases are further elaborated into use case diagrams."}, {"question": "What is the definition of a framework?", "answer": "• Define application framework (if applicable): Application framework is a term usually used to refer to a set of libraries or classes that are used to implement the standard structure of an application for a specific operating system."}, {"question": "What is the definition of a persistent object?", "answer": "Identify persistent objects/data (if applicable): Identify objects that have to last longer than a single runtime of the application."}, {"question": "What is the definition of a design pattern?", "answer": "Designing concepts • Defining objects, creating class diagram from conceptual diagram: Usually map entity to class."}, {"question": "What is the definition of a user interface?", "answer": "• User interface documentations (if applicable): Document that shows and describes the look and feel of the end product"s user interface."}, {"question": "What is the definition of a remote object?", "answer": "Identify and define remote objects (if applicable)."}, {"question": "What is a use case?", "answer": "Each use case provides one or more scenarios that convey how the system should interact with the users called actors to achieve a specific business goal or function."}, {"question": "What is the purpose of a relational data model?", "answer": "If an object database is not used, the relational data model should usually be created before the design, since the strategy chosen for object-relational mapping is an output of the OO design process."}, {"question": "What is the difference between a relational data model and an object-oriented design arti?", "answer": "However, it is possible to develop the relational data model and the object-oriented design artifacts in parallel, and the growth of an artifact can stimulate the refinement of other artifacts."}, {"question": "What is a use case?", "answer": "• Use case: Use case is a description of sequences of events that, taken together, lead to a system doing something useful."}, {"question": "What are the main characteristics of a design pattern?", "answer": "• Identifying attributes."}, {"question": "What is a design pattern?", "answer": "• Use design patterns (if applicable): A design pattern is not a finished design, it is a description of a solution to a common problem, in a context[1]."}, {"question": "What is a use case diagram?", "answer": "Use case diagrams are used to identify the actor (users or other systems) and the processes they perform."}, {"question": "What is a design pattern?", "answer": "It can also be thought of as a template for how to solve a problem that can be used in many different situations and/or applications."}, {"question": "What is the definition of a design pattern?", "answer": "Object-oriented design patterns typically show relationships and interactions between classes or objects, without specifying the final application classes or objects that are involved."}, {"question": "What is the definition of a relational database?", "answer": "If a relational database is used, design the object relation mapping."}, {"question": "Who are the actors in the use case?", "answer": "Use case actors may be end users or other systems."}, {"question": "What is the main advantage of using a design pattern?", "answer": "The main advantage of using a design pattern is that it can be reused in multiple applications."}, {"question": "What is the definition of a use case?", "answer": "?"}, {"question": "What are the two types of objects?", "answer": "There are two kinds of object models: dynamic and static."}, {"question": "What is the difference between a class diagram and a static model?", "answer": "From mental model to code."}, {"question": "What is the best way to design a UML object?", "answer": "Draw, then code."}, {"question": "What is the best way to draw a UML diagram?", "answer": "Drawing some UML on a whiteboard or UML CASE tool, then switching to #1 with a textstrong IDE (e."}, {"question": "What is a sequence diagram?", "answer": "A sequence diagram shows, as parallel vertical lines, different processes or objects that live simultaneously, and, as horizontal arrows, the messages exchanged between them, in the order in which they occur."}, {"question": "What is the relationship between static and dynamic modeling?", "answer": "There"s a relationship between static and dynamic modeling and the agile modeling practice of create models in parallel: Spend a short period of time on interaction diagrams (dynamics), then switch to a wall of related class diagrams (statics)."}, {"question": "What is the best way to design a system?", "answer": "Design-while-coding (Java, C#,."}, {"question": "What is the difference between a static and dynamic UML diagram?", "answer": "Code."}, {"question": "What are the two types of objects?", "answer": "Designing Objects: What are Static and Dynamic Modeling?"}, {"question": "What is the difference between static and dynamic UML?", "answer": "."}, {"question": "What is the difference between a sequence diagram and a collaborative diagram?", "answer": "• Sequence Diagrams/Collaboration: Extend the System Sequence Diagram to add specific objects that handle the system events."}, {"question": "What is the best way to design a UML object?", "answer": "Many a dead tool vendor has washed onto the shores of this steep island."}, {"question": "How do you design objects?", "answer": "How do developers design objects?"}, {"question": "What is the difference between static and dynamic UML?", "answer": "g."}, {"question": "What is the best way to design a system diagram?", "answer": "), ideally with power tools such as refactorings."}, {"question": "What are the main types of objects that are used for UML?", "answer": "Static models, such as UML class diagrams, help design the definition of packages, class names, attributes, and method signatures (but not method bodies)."}, {"question": "What is the difference between dynamic and dynamic UML?", "answer": "2."}, {"question": "What are the main types of objects that are used for UML?", "answer": "Dynamic models, such as UML interaction diagrams sequence diagrams or communication diagrams), help design the logic, the behavior of the code or the method bodies."}, {"question": "What are the most important diagrams to create?", "answer": "They tend to be the more interesting, difficult, important diagrams to create."}, {"question": "What are the three ways to design objects?", "answer": "Here are three ways: 1."}, {"question": "What is a class diagram?", "answer": "The messages and classes identified through the development of the sequence diagrams can serve as input to the automatic generation of the global class diagram of the system."}, {"question": "What IDE do you use to create a sequence diagram?", "answer": ", Eclipse or Visual Studio)."}, {"question": "What is the difference between static and dynamic UML?", "answer": "3."}, {"question": "What is the best way to create a diagram?", "answer": "Somehow, the tool generates everything from diagrams."}, {"question": "What are the two types of UML diagrams?", "answer": "Fig: Static and dynamic UML diagrams for object modeling."}, {"question": "What is the best way to design a UML diagram?", "answer": "Only draw."}, {"question": "What is the difference between a static and dynamic UML diagram?", "answer": ""Only draw" is a misnomer, as this still involves a text programming language attached to UML graphic elements."}, {"question": "What is a class diagram?", "answer": "• Design Class diagram: A class diagram is a type of static structure UML diagram that describes the structure of a system by showing the system"s classes, their attributes, and the relationships between the classes."}, {"question": "What is the name of the class?", "answer": "4."}, {"question": "What are the responsibilities of a class?", "answer": "The names of other classes with which the class will collaborate to fulfill its responsibilities."}, {"question": "What is a class responsible for?", "answer": "It often works with a particular class to complete a step (or steps) in a scenario."}, {"question": "What is a Collaborator?", "answer": "Collaborator A Collaborator is another class that is used to get information for, or perform actions for the class at hand."}, {"question": "What are the responsibilities of a class?", "answer": "For example, a person class might have knowledge (and responsibility) for its name, address, and phone number."}, {"question": "What is the definition of a responsibility?", "answer": "Responsibility A Responsibility is anything that the class knows or does."}, {"question": "What is a CRC card?", "answer": "Class Responsibility Collaboration (CRC) cards are a brainstorming tool used in the design of object-oriented software."}, {"question": "What is the definition of a class?", "answer": "In another example an automobile class might have knowledge of its size, its number of doors, or it might be able to do things like stop and go."}, {"question": "What are the most common CRC cards?", "answer": "CRC cards are usually created from index cards on which are written: 1."}, {"question": "What is the name of the class?", "answer": "5."}, {"question": "What are the objects of interest in the system being modeled?", "answer": "Objects are things of interest in the system being modeled."}, {"question": "What are the Collaborators of a class?", "answer": "The Collaborators of a class appear along the right side of the CRC card."}, {"question": "What is a CRC card?", "answer": "A CRC modeling session involves a group sitting around a table, discussing and writing on the cards as they play "what if" scenarios with the objects, considering what they must do and what other objects they must collaborate with."}, {"question": "What are the responsibilities of a class?", "answer": "These responsibilities are things that the class has knowledge about itself, or things the class can do with the knowledge it has."}, {"question": "What are the responsibilities of a class?", "answer": "The responsibilities of the class."}, {"question": "What are the responsibilities of a class?", "answer": "The Responsibilities of a class appear along the left side of the CRC card."}, {"question": "What is the class name?", "answer": "The class name 2."}, {"question": "What are the responsibilities of a class?", "answer": "CRC cards are paper index cards on which one writes the responsibilities and collaborators of classes."}, {"question": "What are the most popular object design techniques?", "answer": "Object Design Techniques: CRC Cards A popular text-oriented modeling technique is Class Responsibility Collaboration (CRC) cards, created by the agile, influential minds of Kent Beck and Ward Cunningham (also founders of the ideas of XP and design patterns)."}, {"question": "What are the responsibilities of a class?", "answer": "They can be a person, place, thing, or any other concept important to the system at hand."}, {"question": "What is the definition of a class?", "answer": "Author Fig: CRC card Format Fig: CRC card Example Class A Class represents a collection of similar objects."}, {"question": "What are the responsibilities of a class?", "answer": "Its Super and Sub classes (if applicable) 3."}, {"question": "What is the name of the class?", "answer": "The Class name appears across the top of the CRC card."}, {"question": "What is the class name on the CRC card?", "answer": "Each card represents one class."}, {"question": "What is the purpose of a use-case realization?", "answer": "Two cards that collaborate with one another should be placed close together on the table, whereas two cards that don’t collaborate should be placed far apart Realization of Use case A use-case realization represents how a use case will be implemented in terms of collaborating objects."}, {"question": "Why is it important to separate the use-case realization from its use case?", "answer": "The reason for separating the use-case realization from its use case is that doing so allows the use cases to be managed separately from their realizations."}, {"question": "What is the purpose of separating the use case from its realization?", "answer": "UML diagrams that support use-case realizations can be produced in an analysis context, a design context, or both, depending on the needs of the project."}, {"question": "What is the most common form of collaboration?", "answer": "Collaboration will be in one of two forms: a request for information or a request to perform a task."}, {"question": "What is the purpose of separating the use case from its realization?", "answer": "For larger projects, separating the use case and its realization allows changes to the design of the use case without affecting the baseline use case itself."}, {"question": "What is the purpose of the article?", "answer": "• Move the cards around."}, {"question": "What is the purpose of the article?", "answer": "Consider the case of a family of telephone switches which have many use cases in common, but which design and implement them differently according to product positioning, performance and price."}, {"question": "What is the purpose of collaboration?", "answer": "Therefore, it must collaborate (work) with other classes to get the job done."}, {"question": "What can be used to describe a use-case realization?", "answer": "This artifact can take various forms."}, {"question": "How should the cards be placed on the table?", "answer": "To improve everyone’s understanding of the system, the cards should be placed on the table in an intelligent manner."}, {"question": "What is the most common way to identify a responsibility for a class?", "answer": "You will often identify a responsibility for a class to fulfill a collaboration with another class."}, {"question": "What is the purpose of finding classes?", "answer": "• Find classes."}, {"question": "What should you do to find a class?", "answer": "You should ask yourself what a class does as well as what information you wish to maintain about it."}, {"question": "What is a use-case realization?", "answer": "In a model, a use-case realization is represented as a UML collaboration that groups the diagrams and other information (such as textual descriptions) that form part of the use-case realization."}, {"question": "What are the main classes that should be found?", "answer": "A good rule of thumb is that you should look for the three-to-five main classes right away, such as Student, Seminar, and Professor in Figure."}, {"question": "What is the purpose of the article?", "answer": "• Define collaborators."}, {"question": "What can be used to describe a class?", "answer": "It can include, for example, a textual description (a document), class diagrams of participating classes and subsystems, and interaction diagrams (communication and sequence diagrams) that illustrate the flow of interactions between class and subsystem instances."}, {"question": "What is the purpose of the use-case realization?", "answer": "For each use case in the use-case model, there can be a use-case realization in the analysis/design model with a realization relationship to the use case."}, {"question": "What is the most important part of the analysis task?", "answer": "• Find responsibilities."}, {"question": "What is the difference between a realization and a use case?", "answer": "In UML this is shown as a dashed arrow, with an arrowhead like a generalization relationship, indicating that a realization is a kind of inheritance, as well as a dependency."}, {"question": "What does a class have to do to fulfill its responsibilities?", "answer": "A class often does not have sufficient information to fulfill its responsibilities."}, {"question": "What is the purpose of finding classes?", "answer": "Finding classes is fundamentally an analysis task because it deals with identifying the building blocks for your application."}, {"question": "What is the purpose of separating the use case from its realization?", "answer": "This is particularly important for larger projects or families of systems where the same use cases can be designed differently in different products within the product family."}, {"question": "What are the factors that help improve the overall quality of the system?", "answer": "These factors help improve the overall quality of the system."}, {"question": "What is the use case for a navigation system?", "answer": "GPS Navigate to Address Use Case 1."}, {"question": "What is the use case for a navigation system?", "answer": "Example, the simple use case for a automobile navigation system below."}, {"question": "What is the use case for a GPS navigation system?", "answer": "Driver selects address System prompts for address #, street, city 3."}, {"question": "What is the use case for cash withdrawal?", "answer": "The figure below shows an analysis class diagram for the realization of the Withdraw Cash Item use case."}, {"question": "What are the types of diagrams used in a use-case?", "answer": "Communication and Sequence Diagrams Owned by a Use-Case Realization For each use-case realization there can be one or more interaction diagrams depicting its participating objects and their interactions."}, {"question": "What are the use cases of a class?", "answer": "A class and its objects often participate in several use-case realizations."}, {"question": "What are the use-cases?", "answer": "Class Diagrams Owned by a Use-Case Realization For each use-case realization there can be one or more class diagrams depicting its participating classes."}, {"question": "What is the use case for a navigation system?", "answer": "Driver starts navigational system System prompts for whether the driver needs help finding an address, intersection, or point of interest 2."}, {"question": "What are the two types of interaction diagrams?", "answer": "They express similar information, but show it in different ways."}, {"question": "What is the purpose of a class diagram?", "answer": "Realizing use cases through interaction diagrams helps to keep the design simple and cohesive."}, {"question": "What are the main reasons for assigning responsibilities to classes?", "answer": "Assigning responsibilities to classes on the basis of what the use-case scenario explicitly requires encourages the design to contain the following: • Only the functionality actually used in support of a use case scenario, • Functionality that can be tested through an associated test case, • Functionality that is more easily traceable to requirements and changes,?"}, {"question": "What are the most common types of class dependencies?", "answer": "Explicitly declared class dependencies that are easier to manage."}, {"question": "What is the use case for cash withdrawal?", "answer": "Fig: Use case realization of Cash Withdraw Use case The use case Receive Deposit Item and its analysis-level class diagram."}, {"question": "What are the differences between the two types of interaction diagrams?", "answer": "Sequence diagrams show the explicit sequence of messages and are better when it is important to visualize the time ordering of messages, whereas communication diagrams show the communication links between objects and are better for understanding all of the effects on a given object and for algorithm design."}, {"question": "What are the two types of interaction diagrams?", "answer": "There are two types of interaction diagrams: sequence diagrams and communication diagrams."}, {"question": "What is the importance of a class diagram when designing a use-case?", "answer": "It is important while designing to coordinate all the requirements on a class and its objects that different use-case realizations can have."}, {"question": "What is the meaning of communication diagrams?", "answer": "Sequence diagrams?"}, {"question": "What is the difference between a sequence and a communication diagram?", "answer": "Sequence diagrams A sequence diagram shows interaction among objects as a two dimensional chart."}, {"question": "What is the definition of a related diagram?", "answer": "A related diagram is the interaction overview diagram; it provides a big-picture overview of how a set of interaction diagrams are related in terms of logic and process-flow."}, {"question": "How is the interaction diagram used?", "answer": "However, it"s new to UML 2, and so it"s too early to tell if it will be practically useful."}, {"question": "What is the order of the messages in the diagram?", "answer": "The messages are shown in chronological order from the top to the bottom."}, {"question": "What are the common types of interaction diagrams?", "answer": "There are two common types: sequence and communication interaction diagrams."}, {"question": "What type of diagrams can express similar interactions?", "answer": "communication diagrams Both can express similar interactions."}, {"question": "What is the name of the object?", "answer": "The objects participating in the interaction are shown at the top of the chart as boxes attached to a vertical dashed line."}, {"question": "What is the difference between a sequence and a communication diagram?", "answer": "g."}, {"question": "What is the position of the chart?", "answer": "The chart is read from top to bottom."}, {"question": "What is the use of a sequence diagram?", "answer": "Sequence diagrams are the more notationally rich of the two types, but communication diagrams have their use as well, especially for wall sketching."}, {"question": "What is the name of the message?", "answer": "Each message is labeled with the message name."}, {"question": "What is the name of the object?", "answer": "Inside the box the name of the object is written with a colon separating it from the name of the class and both the name of the object and the class is underlined."}, {"question": "What is the activation symbol?", "answer": "The rectangle drawn on the lifetime is called the activation symbol and indicates that the object is active as long as the rectangle exists."}, {"question": "What is the difference between a sequence and a communication diagram?", "answer": "However, if some object is created during the execution of the use case and participates in the interaction (e."}, {"question": "What is the lifeline of an object?", "answer": "The lifeline indicates the existence of the object at any particular point of time."}, {"question": "What is the name of the object’s lifeline?", "answer": "The vertical dashed line is called the object’s lifeline."}, {"question": "What are the two types of interaction diagrams?", "answer": "Sequence and Communication Diagrams The term interaction diagram is a generalization of two more specialized UML diagram types:?"}, {"question": "What does the object at the top signify?", "answer": "The objects appearing at the top signify that the object already existed when the use case execution was initiated."}, {"question": "What is the use of interaction diagrams?", "answer": "They are used for dynamic object modeling."}, {"question": "What is the name of the message?", "answer": "Each message is indicated as an arrow between the lifeline of two objects."}, {"question": "What is the sequence of messages in a diagram?", "answer": "That is, reading the diagram from the top to the bottom would show the sequence in which the messages occur."}, {"question": "What is the best way to show the object at the right place?", "answer": "a method call), then the object should be shown at the appropriate place on the diagram where it is created."}, {"question": "What is the best way to illustrate how objects interact via messages?", "answer": "System displays appropriate digital map with route information UML Interaction Diagrams The UML includes interaction diagrams to illustrate how objects interact via messages."}, {"question": "What is the sequence diagram for the book renewal use case for the Library Automation Software?", "answer": "Example The sequence diagram for the book renewal use case for the Library Automation Software is shown in fig."}, {"question": "What type of control information can be included in the sequence diagram?", "answer": "doTwo(); myB."}, {"question": "What type of control information can be included in the sequence diagram?", "answer": "e."}, {"question": "What type of control information can be included?", "answer": "Some control information can also be included."}, {"question": "What is the purpose of the sequence diagram?", "answer": "The development of the sequence diagram in the development methodology would help us in determining the responsibilities of the different classes; i."}, {"question": "What is the ALT frame?", "answer": "Messages to "self" or "this" Creation of Instances Object Lifelines and Object Destruction Diagram Frames Conditional Messages Mutually Exclusive Conditional Messages An ALT frame is placed around the mutually exclusive alternatives."}, {"question": "What type of control information can be included in a sequence diagram?", "answer": "b."}, {"question": "What type of condition is used to indicate that a message is sent?", "answer": "[invalid]) indicates that a message is sent, only if the condition is true."}, {"question": "What type of control information can be included in a sequence diagram?", "answer": "."}, {"question": "What should be included in the sequence diagram?", "answer": "what methods should be supported by each class."}, {"question": "What is the simplest way to show a message?", "answer": "An iteration marker shows the message is sent many times to multiple receiver objects as would happen when a collection or the elements of an array are being iterated."}, {"question": "What is the most common type of iteration?", "answer": "Nesting of frames."}, {"question": "What type of control information can be included in the sequence diagram?", "answer": "g."}, {"question": "What information can be included in the iteration?", "answer": "The basis of the iteration can also be indicated e."}, {"question": "What type of control information is included in the sequence diagram?", "answer": "Probably, that class A has a method named doOne and an attribute of type B."}, {"question": "What type of control information is particularly valuable?", "answer": "Two types of control information are particularly valuable: a."}, {"question": "What is the partial definition of class A?", "answer": "Perhaps the partial definition of class A is: public class A  private B myB = new B(); public void doOne()  myB."}, {"question": "What is the most common way to show a return message?", "answer": "• Using a reply (or return) message line at the end of an activation bar."}, {"question": "What is the best way to show a return result from a message?", "answer": "Fig: Two ways to show a return result from a message."}, {"question": "What is the basis of the iteration?", "answer": "[for every book object]."}, {"question": "What type of control information can be included in a sequence diagram?", "answer": "doThree();  //."}, {"question": "What is the syntax for a message?", "answer": "Basic Sequence diagram Notation: Lifeline box Fig: Notation for lifeline box Messages Fig: Message and focus of control Reply or Returns • Using the message syntax returnVar = message(parameter)."}, {"question": "What class A has a method named doTwo and an attribute of type B?", "answer": "Also, that class B has methods named doTwo and doThree."}, {"question": "What is the definition of a sequence diagram?", "answer": "Illustrate interactions in a kind of fence format, in which each new object is added to the right, Fig: Example of Sequence Diagram What might this represent in code?"}, {"question": "What type of control information is particularly valuable?", "answer": "A condition (e."}, {"question": "Why are the messages prefixed with sequence numbers?", "answer": "Messages are prefixed with sequence numbers because they are only way to describe the relative sequencing of the messages in this diagram."}, {"question": "What is the meaning of collaboration diagram?", "answer": "In this diagram, an object is also called a collaborator."}, {"question": "What is the link between objects?", "answer": "The link between objects is shown as a solid line and can be used to send messages between two objects."}, {"question": "What is the use of collaboration diagrams in our development process?", "answer": "The use of the collaboration diagrams in our development process would be to help us to determine which classes are associated with which other classes."}, {"question": "What is the message makePayment sent to?", "answer": "The message makePayment is sent to an instance of a Register."}, {"question": "What is the sequence diagram for makePayment?", "answer": "."}, {"question": "What is the difference between a collaboration diagram and a sequence diagram?", "answer": "Illustrate object interactions in a graph or network format, in which objects can be placed anywhere on the diagram (the essence of their wall sketching advantage), as shown in fig Fig: Communication Diagram (Collaboration) The collaboration diagram for the example of fig in sequence diagram is shown in fig."}, {"question": "What is the sequence diagram for makePayment?", "answer": "3 is read as follows: 1."}, {"question": "What is the sequence diagram for book renew?", "answer": "Fig: Sequence diagram for book renew use case."}, {"question": "What is the structure of a collaboration diagram?", "answer": "The structural aspect of a collaboration diagram consists of objects and the links existing between them."}, {"question": "What is the behavioral aspect of a collaboration diagram?", "answer": "The behavioral aspect is described by the set of messages exchanged among the different collaborators."}, {"question": "What is the sequence diagram for makePayment?", "answer": "2."}, {"question": "What is the sequence diagram for makePayment?", "answer": "The Register instance sends the makePayment message to a Sale instance."}, {"question": "What is the sequence diagram for makePayment?", "answer": "3."}, {"question": "What is the sender of the makePayment message?", "answer": "The sender is not identified."}, {"question": "What is the sequence diagram for makePayment?", "answer": "The message is shown as a labeled arrow placed near the link."}, {"question": "What is the difference between a sequence diagram and a collaboration diagram?", "answer": "This is unlike a sequence diagram which shows only the behavioral aspects."}, {"question": "What is the sequence diagram for makePayment?", "answer": "Fig: Collaboration Diagram for book renew use case Fig: Example of collaboration diagram for makePayment The collaboration diagram shown in Figure 15."}, {"question": "What is the sequence diagram for a sale?", "answer": "The Sale instance creates an instance of a Payment."}, {"question": "What is the sequence diagram for makePayment?", "answer": "Fig: Sequence Diagram for Cancel Order Fig: Sequence diagram for car parking Fig: Sequence diagram of makePayment use case The sequence diagram shown in Figure makePayment is read as follows: 1."}, {"question": "What is the difference between a collaboration diagram and a sequence diagram?", "answer": "Communication/Collaboration diagrams A collaboration diagram shows both structural and behavioral aspects explicitly."}, {"question": "What is the difference between a class and an instance?", "answer": "A name can be used to uniquely identify the instance."}, {"question": "What is the difference between a link and a class?", "answer": "For example, there is a link."}, {"question": "What is the sequence number of a message?", "answer": "A sequence number is added to show the sequential order of messages in the current thread of control."}, {"question": "What is the difference between a class and an instance?", "answer": "."}, {"question": "What is the difference between a class and a classifier?", "answer": "Comparison of Sequence and Collaboration Diagrams Common Interaction Diagram Notation Classes and Instances The UML has adopted a simple and consistent approach to illustrate instances vs."}, {"question": "What is the convention for creating an instance?", "answer": "Fig: Notation for self message Creation of Instances Any message can be used to create an instance, but there is a convention in the UML to use a message named create for this purpose."}, {"question": "What is the difference between instances and classifiers?", "answer": "classifiers ): For any kind of UML element (class, actor,."}, {"question": "What is the difference between a message and a class?", "answer": "Messages Each message between objects is represented with a message expression and small arrow indicating the direction of the message."}, {"question": "What is the difference between a class and a type?", "answer": "), an instance uses the same graphic symbol as the type, but the designator string is underlined."}, {"question": "What is the difference between a link and a class?", "answer": "This is illustrated by a link to itself, with messages flowing along the link."}, {"question": "What is the difference between a class and an instance?", "answer": "Furthermore, the UML property new may optionally be added to the instance box to highlight the creation."}, {"question": "What is the difference between a link and an association?", "answer": "More formally, a link is an instance of an association."}, {"question": "What is the path of navigation in a UML?", "answer": "from a Register to a Sale, along which messages may flow, such as the makePayment message."}, {"question": "What is the difference between a link and a class?", "answer": "For example: spec := getProductSpect(id) spec := getProductSpect(id:ItemID) spec := getProductSpect(id:ItemID) ProductSpecification Basic Collaboration Diagram Notation Links A link is a connection path between two objects; it indicates some form of navigation and visibility between the objects is possible."}, {"question": "What is the syntax for a message expression?", "answer": "Basic Message Expression Syntax The UML has a standard syntax for message expressions: return := message(parameter : parameterType) : returnType Type information may be excluded if obvious or unimportant."}, {"question": "What is the difference between a message to a self and a message to a?", "answer": "Messages to "self" or "this" A message can be sent from an object to itself."}, {"question": "What is the difference between a link and a class?", "answer": "Many messages may flow along this link."}, {"question": "What is the difference between a class and an instance?", "answer": "If none is used, note that a ":" precedes the class name."}, {"question": "What is the difference between a class and an instance?", "answer": "If another (perhaps less obvious) message name is used, the message may be annotated with a special feature called a UML stereotype, like so: «create»."}, {"question": "What is the difference between create and classifier?", "answer": "The create message may include parameters, indicating the passing of initial values."}, {"question": "What is the difference between a link and a path?", "answer": "or path of navigation."}, {"question": "What is the difference between a class and an object?", "answer": "Fig: Class and corresponding object(instance) notation Therefore, to show an instance of a class in an interaction diagram, the regular class box graphic symbol is used, but the name is underlined."}, {"question": "What is the meaning of a class diagram?", "answer": "Class Diagrams The UML includes class diagrams to illustrate classes, interfaces, and their associations."}, {"question": "What is the conditional path?", "answer": "Mutually Exclusive Conditional Paths In this case it is necessary to modify the sequence expressions with a conditional path letter."}, {"question": "What is the use of class diagrams?", "answer": "They are used for static object modeling."}, {"question": "What is the most important part of the iteration clause?", "answer": "If the details of the iteration clause are not important to the modeler, a simple ’*’ can be used."}, {"question": "What is the sequence number of a message?", "answer": "1 is nested message within Ib."}, {"question": "What is the structure of a system?", "answer": "The static structure of a system comprises of a number of class diagrams and their dependencies."}, {"question": "What is the sequence number of messages?", "answer": "Note that subsequent nested messages are still consistently prepended with their outer message sequence."}, {"question": "What is the order of messages in a message?", "answer": "Message Number Sequencing The order of messages is illustrated with sequence numbers 1."}, {"question": "What is the order of messages illustrated with?", "answer": "The first message is not numbered."}, {"question": "What is the sequence number of a message?", "answer": "Both are sequence number 1 since either could be the first internal message."}, {"question": "What is the order of messages in a message?", "answer": "Nesting is denoted by prepending the incoming message number to the out going message number."}, {"question": "What is the order of messages shown with?", "answer": "The order and nesting of subsequent messages is shown with a legal num bering scheme in which nested messages have a number appended to them."}, {"question": "What is the notation for a looping iteration?", "answer": "Iteration or Looping Iteration notation is shown in Figure below."}, {"question": "What is the meaning of a class diagram?", "answer": "A class diagram describes the static structure of a system."}, {"question": "What is the order of messages in a message?", "answer": "2."}, {"question": "What is the sequence number of a message?", "answer": "Figure states that either 1a or 1b could execute after msg1."}, {"question": "What is the order of messages illustrated with?", "answer": "Thus,msg1() is unnumbered."}, {"question": "What are the main constituents of a class diagram?", "answer": "The main constituents of a class diagram are classes and their relationships: generalization, aggregation, association, and various kinds of dependencies."}, {"question": "What is the order of messages shown in a conditional message?", "answer": "Conditional Messages: A conditional message is shown by following a sequence number with a conditional clause in square brackets, similar to an iteration clause."}, {"question": "What is the first letter used in a message?", "answer": "The first letter used is a by convention."}, {"question": "What is the meaning of a class diagram?", "answer": "It shows how a system is structured rather than how it behaves."}, {"question": "What is the order of messages in a message?", "answer": "Thus Ib."}, {"question": "What is the message number sequence?", "answer": "The message is only sent if the clause evaluates to true."}, {"question": "What is the common term for a class diagram?", "answer": "A common modeling term for this purpose is design class diagram (DCD)."}, {"question": "What is the term used for the class diagram?", "answer": "For discussion, we also need a unique term to clarify when the class diagram is used in a software or design perspective."}, {"question": "What is the definition of a class diagram?", "answer": "Common Class Diagram Notation Design Class Diagram(DCD) In a conceptual perspective the class diagram can be used to visualize a domain model."}, {"question": "What is the graphical representation of the association relation?", "answer": "9 illustrates the graphical representation of the association relation."}, {"question": "What is the arrowhead on the association line?", "answer": "An arrowhead may be placed on the association line to indicate the reading direction of the association."}, {"question": "What is the meaning of the arrowhead?", "answer": "The arrowhead should not be misunderstood to be indicating the direction of a pointer implementing an association."}, {"question": "What are the types of associations in a class diagram?", "answer": "Dependency Associations Associations are needed to enable objects to communicate with each other."}, {"question": "What is the multiplicity of the association?", "answer": "On each side of the association relation, the multiplicity is noted as an individual number or as a value range."}, {"question": "What is a link?", "answer": "A link is a physical or conceptual connection between object instances."}, {"question": "What is the definition of an association?", "answer": "The association relation between two objects is called object connection or link."}, {"question": "What are the most common classifiers in class diagrams?", "answer": "In class diagrams, the two most common classifiers are regular classes and interfaces."}, {"question": "What is the definition of a classifier?", "answer": "Fig: Different Perspectives in Class Diagram Classifier A UML classifier is "a model element that describes behavioral and structure features"."}, {"question": "What is the meaning of a link?", "answer": "e."}, {"question": "How is the association represented in a class diagram?", "answer": "Association between two classes is represented by drawing a straight line between the concerned classes."}, {"question": "What is the relationship between the objects Amit and Graph Theory?", "answer": "For example, suppose Amit has borrowed the book Graph Theory."}, {"question": "What is the multiplicity of a class?", "answer": "The multiplicity indicates how many instances of one class are associated with each other."}, {"question": "What is the difference between the two types of associations?", "answer": "g."}, {"question": "What is the most common type of association in class diagrams?", "answer": "Associatation 2."}, {"question": "What is the association between the class LibraryMember and the class Book?", "answer": "Here, borrows is the association between the class LibraryMember and the class Book."}, {"question": "What is the meaning of the word association?", "answer": "7."}, {"question": "What is the definition of an association?", "answer": "Usually, an association is a binary relation (between two classes)."}, {"question": "Can a classifier be specialized?", "answer": "Classifiers can also be specialized."}, {"question": "What is the meaning of the arrowhead?", "answer": "Fig."}, {"question": "What is the meaning of a relationship between two classes?", "answer": "5."}, {"question": "What is a tuple?", "answer": "an ordered list of object instances."}, {"question": "What is the definition of a relationship between a class and itself?", "answer": "A class can have an association relationship with itself (called recursive association)."}, {"question": "What is the association between the class LibraryMember and the class Book?", "answer": "For example, consider the statement that Library Member borrows Books."}, {"question": "What is the name of the association?", "answer": "The name of the association is written along side the association line."}, {"question": "What is the meaning of association?", "answer": "In this case, it is usually assumed that two different objects of the class are linked by the association relationship."}, {"question": "What is the difference between the two types of relationships in a class diagram?", "answer": "Composition 4."}, {"question": "What is the meaning of association?", "answer": "An association describes a group of links with a common structure and common semantics."}, {"question": "What is the difference between the two types of associations?", "answer": "Value ranges of multiplicity are noted by specifying the minimum and maximum value, separated by two dots, e."}, {"question": "What is the definition of an association?", "answer": "An association describes a connection between classes."}, {"question": "What is the meaning of a relationship between two classes?", "answer": "1."}, {"question": "What are links?", "answer": "Links are instances of associations."}, {"question": "What is the definition of a link?", "answer": "Mathematically, a link can be considered to be a tuple, i."}, {"question": "What is the definition of a dependency association?", "answer": "Inheritance(Generalization/Specialization) 5."}, {"question": "What is the meaning of asterisks?", "answer": "An asterisk is a wild card and means many (zero or more)."}, {"question": "What are the most common types of relationships in a class diagram?", "answer": "They are a generalization of many of the elements of the UML, including classes, interfaces, use cases, and actors."}, {"question": "What is the connection between the objects Amit and Graph Theory book?", "answer": "Here, borrowed is the connection between the objects Amit and Graph Theory book."}, {"question": "What is the most common type of association in class diagrams?", "answer": "Aggregation 3."}, {"question": "What are the types of relationships in class diagrams?", "answer": "Types of Relationship In Class Diagrams: 1."}, {"question": "What can be involved in an association?", "answer": "However, three or more different classes can be involved in an association."}, {"question": "What does a fig mean?", "answer": "This means that the life of the parts closely ties to the life of the whole."}, {"question": "What is the difference between aggregation and composition?", "answer": "Association vs."}, {"question": "What is the difference between a class and a class?", "answer": "That is, two classes A and B cannot contain instances of each other."}, {"question": "What is the most general relationship?", "answer": "Composition • Association is the most general (m:n) relationship."}, {"question": "What is the relationship between the whole and the part?", "answer": "When the whole is created, the parts are created and when the whole is destroyed, the parts are destroyed."}, {"question": "What is the relationship between an invoice object and a component?", "answer": "As soon as the invoice object is created, all the invoice items in it are created and as soon as the invoice object is destroyed, all invoice items in it are also destroyed."}, {"question": "What is the meaning of association?", "answer": "Observe that associations (and links) appear as verbs in the problem statement."}, {"question": "What is the difference between aggregation and composition?", "answer": "Composition is even stronger than aggregation, ties the lifecycle of the part and the whole together."}, {"question": "What is the meaning of association?", "answer": "e."}, {"question": "What is the relationship between a composition and an invoice?", "answer": "An example of the composition relationship is shown in fig."}, {"question": "What is the difference between aggregation and composition?", "answer": "Aggregation vs."}, {"question": "What is the difference between aggregation and association?", "answer": "Aggregation is a stronger relationship where one is a part of the other."}, {"question": "What is the difference between aggregation and composition?", "answer": "Moreover, aggregation is anti-symmetric (If B is a part of A, A can’t be a part of B)."}, {"question": "What is the meaning of association?", "answer": "."}, {"question": "What is the difference between aggregation and composition?", "answer": "Composition Composition is a stricter form of aggregation, in which the parts are existence-dependent on the whole."}, {"question": "What is the aggregation relation?", "answer": "Also, the aggregation relation is not symmetric."}, {"question": "What is the composition relationship?", "answer": "The composition relationship is represented as a filled diamond drawn at the compositeend."}, {"question": "What is the difference between association and aggregation?", "answer": "• Association relationship can be reflexive (objects can have relation to itself), but aggregation cannot be reflexive."}, {"question": "What is the typical example of composition?", "answer": "A typical example of composition is an invoice object with invoice items."}, {"question": "Can a relationship be reflexive?", "answer": "Aggregation relationship cannot be reflexive (i."}, {"question": "What is the definition of a recursive relationship?", "answer": "That is, an object cannot contain objects of the same class as itself."}, {"question": "What is the definition of a recursive relationship?", "answer": "recursive)."}, {"question": "What is the relationship between the composite object and the component object?", "answer": "When an instance of one object contains instances of some other objects, then aggregation (or composition) relationship exists between the composite object and the component object."}, {"question": "What is the symbol of the composition relationship?", "answer": "Aggregation is represented by the diamond symbol at the composite end of a relationship."}, {"question": "What is the difference between aggregation and composition?", "answer": "Aggregation Aggregation is a special type of association where the involved classes represent a whole-part relationship."}, {"question": "What is the aggregation relationship?", "answer": "In this case, aggregation may consist of an arbitrary number of levels."}, {"question": "What does the aggregate take responsibility of?", "answer": "Thus, the aggregate takes the responsibility of delegation and leadership."}, {"question": "What is the meaning of the association of fig?", "answer": "The association of fig should be read as “Many books may be borrowed by a Library Member”."}, {"question": "What is the difference between aggregation and composition?", "answer": "However, the aggregation relationship can be transitive."}, {"question": "What is the number of instances of the component class aggregated?", "answer": "The number of instances of the component class aggregated can also be shown as in fig."}, {"question": "What is the role of the aggregate?", "answer": "The aggregate takes the responsibility of forwarding messages to the appropriate parts."}, {"question": "what is the difference between inheritance and aggregation?", "answer": "For example, the relation “cash payment is a kind of payment” is modeled using inheritance; “purchase order has a few items” is modeled using aggregation."}, {"question": "What is the difference between inheritance and aggregation?", "answer": "For example, a Frame belongs to exactly one Window whereas in simple aggregation, a part may be shared by several objects."}, {"question": "What is the difference between inheritance and aggregation?", "answer": "• In addition, in composition, the whole has the responsibility for the disposition of all its parts, i."}, {"question": "What is the difference between inheritance and aggregation?", "answer": "e."}, {"question": "What is the property of aggregation?", "answer": "• Composition has the property of exclusive aggregation i."}, {"question": "What is the responsibility of the whole in composition?", "answer": "for their creation and destruction."}, {"question": "can inheritance be changed at run-time?", "answer": "It can not be changed at run-time."}, {"question": "What is the difference between inheritance and aggregation?", "answer": "• Inheritance is defined statically."}, {"question": "What is the difference between inheritance and aggregation?", "answer": "Inheritance vs."}, {"question": "what is the difference between inheritance and aggregation?", "answer": "• Inheritance is used to model a “generic-specific” relationship between classes whereas aggregation/composition is used to model a “whole-part” relationship between classes."}, {"question": "What is the difference between inheritance and aggregation?", "answer": "wherever we could use instances of ‘payment’ in the system, we could substitute it with instances of ‘cash payment’, but the reverse can not be done."}, {"question": "what does inheritance mean?", "answer": "Inheritance means that the object of the derived class inherits the properties of the base class; aggregation means that the object of the whole has objects of the part."}, {"question": "What does inheritance mean?", "answer": "• Inheritance means that the objects of the subclass can be used anywhere the super class may appear, but not the reverse; i."}, {"question": "What is the property of exclusive aggregation?", "answer": "an object can be a part of only one composite at a time."}, {"question": "what is the difference between inheritance and aggregation?", "answer": "* in general, the lifetime of parts and composite coincides o parts with non-fixed multiplicity may be created after composite itself * parts might be explicitly removed before the death of the composite?"}, {"question": "What is the difference between inheritance and aggregation?", "answer": "For example, a Wall may be a part of one or more Room objects."}, {"question": "what is the difference between inheritance and aggregation?", "answer": "Aggregation/Composition • Inheritance describes ‘is a’ / ‘is a kind of’ relationship between classes (base class - derived class) whereas aggregation describes ‘has a’ relationship between classes."}, {"question": "What is the difference between inheritance and aggregation?", "answer": "Similarly, when the Window is destroyed, it must in turn destroy its Frame parts."}, {"question": "What is the difference between inheritance and aggregation?", "answer": "Aggregation is used when the type of the object can change over time."}, {"question": "what is the difference between inheritance and aggregation?", "answer": "For example, when a Frame is created, it has to be attached to an enclosing Window."}, {"question": "what is a aggregation?", "answer": "Aggregation is defined dynamically and can be changed at run-time."}, {"question": "What is the difference between aggregation and aggregation?", "answer": "In such cases, we prefer aggregation instead (see Fig 7."}, {"question": "What is the difference between a customer and a supplier?", "answer": "Here, a business partner is a Customer if it has an aggregated Customer object, a Supplier if it has an aggregated Supplier object and a "Customer_Supplier" if it has both."}, {"question": "What is the advantage of aggregation?", "answer": "The operations of an object are the interfaces of other objects which imply low implementation dependencies."}, {"question": "What is the disadvantage of aggregation?", "answer": "But the significant disadvantage is that it breaks encapsulation, which implies implementation dependence."}, {"question": "What is the difference between a customer and a supplier?", "answer": "e."}, {"question": "What is the difference between a customer and a supplier?", "answer": "12(a)."}, {"question": "What is the difference between a business system and a customer?", "answer": "For example, consider this situation in a business system."}, {"question": "What is the disadvantage of aggregation?", "answer": "The significant disadvantage of aggregation is the increase in the number of objects and their relationships."}, {"question": "What is the advantage of aggregation?", "answer": "• The advantage of aggregation is the integrity of encapsulation."}, {"question": "What is the definition of dependency relationships?", "answer": "The dependency relationship is useful to depict non-attribute visibility between classes, For Parameters and Global or local visibility Fig: Notation of Dependency Fig: Dependency relationships non-attribute visibility Attribute Text and Association Lines Attributes of a classifier (also called structural properties in the UML ) are shown several ways:?"}, {"question": "What is the difference between a BusinessPartner and a Supplier?", "answer": "A BusinessPartner might be a Customer or a Supplier or both."}, {"question": "What is the difference between a business partner and a customer?", "answer": "But in fact, during its lifetime, a business partner might become a customer as well as a supplier, or it might change from one to the other."}, {"question": "What is the difference between the two types of inheritance?", "answer": "But what if there were several different types and combinations there of?"}, {"question": "What is the difference between a customer and a supplier?", "answer": "12(b)."}, {"question": "What is the advantage of aggregation?", "answer": "Also, the aggregation model allows the possibility for a business partner to be neither - i."}, {"question": "What is the difference between a dependency and a using relationship?", "answer": "Dependency/Using relationships Dependency relationship indicates that one element (of any kind, including classes, use cases, and so on) has knowledge of another element."}, {"question": "What is the best way to model a business partner?", "answer": "Initially we might be tempted to model it as in Fig 7."}, {"question": "What are the types of a business partner?", "answer": "Here, we have only two types."}, {"question": "What is a dependency?", "answer": "A dependency is a using relationship that states a change in specification of one thing may affect another thing that uses it, but not necessarily the reverse."}, {"question": "What is the difference between a business partner and a customer?", "answer": "has neither a customer nor a supplier object aggregated with it."}, {"question": "What is the difference between the two types of inheritance?", "answer": "The inheritance tree would be absolutely incomprehensible."}, {"question": "What is the most common way to describe a relationship between a classifier and a?", "answer": "Attribute text notation, such as currentSale : Sale."}, {"question": "What is the advantage of aggregation?", "answer": "Hence, we are able to model it as inheritance."}, {"question": "What is the advantage of aggregation?", "answer": "On the other hand, inheritance allows for an easy way to modify implementation for reusability."}, {"question": "What is the difference between association and line notation?", "answer": "Fig: association notation usage in different perspectives."}, {"question": "what is the difference between the two types of notation?", "answer": "attribute-as-association line has the following style: • a navigability arrow pointing from the source (Register) to target (Sale) object, indicating a Register object has an attribute of one Sale • a multiplicity at the target end, but not the source end use the multiplicity notation • a rolename (currentSale) only at the target end to show the attribute name?"}, {"question": "What is the difference between a UML constraint and a UML notation?", "answer": "a UML constraint, in which case it must be encased in braces "."}, {"question": "What is the difference between the two notations?", "answer": ""?"}, {"question": "What is the definition of a method body?", "answer": "a method body the implementation of a UML operation."}, {"question": "What is the difference between the two?", "answer": "."}, {"question": "What is the difference between a register and a sale?", "answer": "Fig: Example of Method body notation in Note Symbol Association Class An association class allows you treat an association itself as a class, and model it with attributes, operations, and other features."}, {"question": "What is the difference between the two?", "answer": "• Association line notation • Both together Figure shows these notations being used to indicate that a Register object has an attribute (a reference to) one Sale object."}, {"question": "What does a UML note or comment have?", "answer": "a UML note or comment, which by definition have no semantic impact?"}, {"question": "What is the difference between the two?", "answer": "For example, if a Company employs many Persons, modeled with an Employs association, you can model the association itself as the Employment class, with attributes such as startDate."}, {"question": "What are the visibility marks for a register object?", "answer": "visibility marks include + (public), - (private), and so forth."}, {"question": "What is the difference between the two?", "answer": "Guideline: Attributes are usually assumed private if no visibility is given."}, {"question": "What are the common symbols used in UML?", "answer": "no association name Notes, Comments, Constraints, and Method Bodies Note symbols can be used on any UML diagram, but are especially common on class diagrams."}, {"question": "What is the full format of the attribute text notation?", "answer": "The full format of the attribute text notation is: visibility name : type multiplicity = default property-string Also, the UML allows any other programming language syntax to be used for the attribute declaration, as long as the reader or tool are notified."}, {"question": "What is the meaning of a note symbol?", "answer": "A UML note symbol is displayed as a dog-eared rectangle with a dashed line to the annotated element; A note symbol may represent several things, such as:?"}, {"question": "What is the difference between the two?", "answer": "In the UML, it is illustrated with a dashed line from the association to the association class."}, {"question": "What is the difference between the two?", "answer": "Fig: Attribute text versus association line notation for a UML attribute."}, {"question": "What is the definition of a class that has attribute visibility?", "answer": "To illustrate, in a Java class definition for Register, a Register instance may have attribute visibility to a ProductCatalog, since it is an attribute (Java instance variable) of the Register."}, {"question": "What is the most common form of visibility in object-oriented systems?", "answer": "This is a very common form of visibility in object-oriented systems."}, {"question": "What is the definition of visibility?", "answer": "More generally, it is related to the issue of scope: Is one resource (such as an instance) within the scope of another?"}, {"question": "What is the name of the class?", "answer": "public class Register ."}, {"question": "What is the definition of visibility?", "answer": "Fig: Attribute Visibility Parameter Visibility Parameter visibility from A to B exists when B is passed as a parameter to a method of A."}, {"question": "What is the definition of global visibility?", "answer": "• Global visibility B is in some way globally visible."}, {"question": "What is the most common form of visibility in object-oriented systems?", "answer": "After attribute visibility, it is the second most common form of visibility in object-oriented systems."}, {"question": "What is the name of the class?", "answer": "In the UML, it may be shown with double vertical lines on the left and right sides of the class box."}, {"question": "What is the most common way that visibility can be achieved from object A to object B?", "answer": "There are four common ways that visibility can be achieved from object A to object B: • Attribute visibility B is an attribute of A."}, {"question": "What is the definition of visibility?", "answer": "."}, {"question": "What is the name of the class?", "answer": "Fig: Association Class Singleton Classes Active Class Fig: Active class An active object runs on and controls its own thread of execution."}, {"question": "What is the class of an active object?", "answer": "Not surprisingly, the class of an active object is an active class."}, {"question": "What is the typical definition of visibility?", "answer": "A typical visibility solution is that a reference to the ProductCatalog instance is maintained as an attribute of the Register."}, {"question": "What is the name of the public class Register?", "answer": "private ProductCatalog catalog;."}, {"question": "What is the definition of a visibility?", "answer": "It is a relatively permanent visibility because it persists as long as A and B exist."}, {"question": "What is the definition of visibility?", "answer": "Determining Visibility: Visibility is the ability of an object to "see" or have a reference to another object."}, {"question": "What is the definition of a visibility?", "answer": "It is a relatively temporary visibility because it persists only within the scope of the method."}, {"question": "What is the definition of visibility?", "answer": "For example, to create an interaction diagram in which a message is sent from a Register instance to a ProductCatalog instance, the Register must have visibility to the ProductCatalog."}, {"question": "What is the definition of a visibility?", "answer": "Attribute Visibility Attribute visibility from A to B exists when B is an attribute of A."}, {"question": "What is the definition of visibility?", "answer": "• Local visibility B is a (non-parameter) local object in a method of A."}, {"question": "What is the definition of visibility?", "answer": "• Parameter visibility B is a parameter of a method of A."}, {"question": "What is the common form of visibility for a sale?", "answer": "As with parameter visibility, it is common to transform locally declared visibility into attribute visibility."}, {"question": "What are the two common ways to achieve local visibility?", "answer": "Two common means by which local visibility is achieved are: • Create a new local instance and assign it to a local variable."}, {"question": "What is the second variation of the parameter visibility?", "answer": "An example of the second variation (assigning the returning object to a local variable) can be found in the enterItem method of class Register."}, {"question": "What is the most common form of visibility in object-oriented systems?", "answer": "It is the least common form of visibility in object-oriented systems."}, {"question": "What is the common way to transform visibility into an attribute?", "answer": "Within the scope of the makeLineItem method, the Sale has parameter visibility to a ProductDescription Fig: Parameter Visibility It is common to transform parameter visibility into attribute visibility."}, {"question": "What is the most common way to achieve visibility?", "answer": "• Assign the returning object from a method invocation to a local variable."}, {"question": "What is the definition of a constraint?", "answer": "It is visualized in text between braces; for example:  size >= 0."}, {"question": "What is the definition of visibility?", "answer": "When the Sale creates a new SalesLineItem, it passes the ProductDescription in to its initializing method (in C++ or Java, this would be its constructor)."}, {"question": "What is the definition of global visibility?", "answer": "It is a relatively permanent visibility because it persists as long as A and B exist."}, {"question": "What is a constraint?", "answer": "A UML constraint is a restriction or condition on a UML element."}, {"question": "What is the most common way to achieve global visibility?", "answer": "One way to achieve global visibility is to assign an instance to a global variable, which is possible in some languages, such as C++, but not others, such as Java."}, {"question": "What is the most common form of visibility in object-oriented systems?", "answer": "After parameter visibility, it is the third most common form of visibility in object-oriented systems."}, {"question": "What is the definition of visibility?", "answer": "Within the initializing method, the parameter is assigned to an attribute, thus establishing attribute visibility Fig: Parameter to attribute visibility Local Visibility Local visibility from A to B exists when B is declared as a local object within a method of A."}, {"question": "What is the most common form of visibility in UML?", "answer": "Constraints Constraints may be used on most UML diagrams, but are especially common on class diagrams."}, {"question": "What is the definition of a constraint?", "answer": "The text may be natural language or anything else, such as UML"s formal specification language, the Object Constraint Language."}, {"question": "What is the purpose of the example?", "answer": "To illustrate, when the makeLineItem message is sent to a Sale instance, a ProductDescription instance is passed as a parameter."}, {"question": "What is the definition of visibility?", "answer": "It is a relatively temporary visibility because it persists only within the scope of the method."}, {"question": "What is the definition of global visibility?", "answer": "Fig: Local visibility Global Visibility Global visibility from A to B exists when B is global to A."}, {"question": "What is the definition of a qualifier?", "answer": "Fig: Constraint Example Qualified Association A qualified association has a qualifier that is used to select an object (or objects) from a larger set of related objects, based upon the qualifier key."}, {"question": "What are the patterns?", "answer": "What are Patterns?"}, {"question": "What is the difference between a class diagram and an interaction diagram?", "answer": "Fig: User defied compartments Relationship Between Class diagram and interaction diagram When we draw interaction diagrams, a set of classes and their methods emerge from the creative design process of dynamic object modeling."}, {"question": "What is the definition of a qualifier?", "answer": "."}, {"question": "What are the most common types of collection classes?", "answer": "[7] They are most commonly used for the element type of collection classes, such as the elements of lists and maps."}, {"question": "What are the most common types of patterns?", "answer": "The pattern solutions are typically described in terms of class and interaction diagrams."}, {"question": "What languages support templatized types?", "answer": "For example, if a ProductCatalog contains many ProductDescriptions, and each one can be selected by an itemID, Fig: Qualifier Template Classes and Interfaces Many languages (Java, C++,."}, {"question": "What is the class that implements the List interface?", "answer": "And, the concrete class that implements the List interface is an ArrayList: public class Board  private ListSquare> squares = new ArrayListSquare>(); //."}, {"question": "What is the difference between a class box and a template?", "answer": "Fig: Interface and Template class User-Defined Compartments In addition to common predefined compartments class compartments such as name, attributes, and operations, user-defined compartments can be added to a class box."}, {"question": "What are examples of design patterns?", "answer": "Examples of design patterns are expert pattern, creator pattern, controller pattern etc."}, {"question": "What languages support templatized types?", "answer": ") support templatized types, also known (with shades of variant meanings) as templates, parameterized types, and generics."}, {"question": "How can we see a class definition in a class diagram?", "answer": "21, we see that a Register and Sale class definition in a class diagram can be obviously derived."}, {"question": "What is a pattern?", "answer": "A pattern serves as a guide for creating a “good” design."}, {"question": "What are the principles of a pattern?", "answer": "Experienced OO developers (and other software developers) build up a repertoire of both general principles and idiomatic solutions that guide them in the creation of software."}, {"question": "What are the patterns created by?", "answer": "These are created by people who spot repeating themes across designs."}, {"question": "What is the sequence diagram of a payment?", "answer": "For example, if we started with the (trivial for explanation) makePayment sequence diagram in Figure 16."}, {"question": "What are the principles and idioms that guide the design of software?", "answer": "These principles and idioms, if codified in a structured format describing the problem and solution and named, may be called patterns."}, {"question": "What are design patterns?", "answer": "Design patterns are reusable solutions to problems that recur in many applications."}, {"question": "What are the principles of a pattern?", "answer": "Patterns are based on sound common sense and the application of fundamental design principles."}, {"question": "What is the definition of a class box?", "answer": "For example, in Java, suppose that a Board software object holds a List (an interface for a kind of collection) of many Squares."}, {"question": "What is the meaning of pattern?", "answer": "The pattern facilitates reuse of knowledge."}, {"question": "What is the purpose of the pattern?", "answer": "Solution: Here the workings of the pattern are explained: which classes interact when and how these interactions are achieved."}, {"question": "What is the purpose of a pattern?", "answer": "It is a way to communicate the pattern to other people and is therefore vital in spreading its reach, this is a fact mentioned in."}, {"question": "What are the effects of a pattern?", "answer": "Consequences: Here the effects of the pattern are explained."}, {"question": "What is the meaning of a pattern?", "answer": "Most simply, a good pattern is a named and well-known problem/solution pair that can be applied in new contexts, with advice on how to apply it in novel situations and discussion of its trade-offs, implementations, variations, and so forth."}, {"question": "What is the purpose of the pattern?", "answer": "It may be accompanied by a list of preconditions that must be fulfilled – only when these conditions are met, the pattern is applied."}, {"question": "What is the purpose of a pattern?", "answer": "Components of Pattern Pattern name: The pattern name is used to identify the pattern once it has been introduced."}, {"question": "What is a design pattern?", "answer": "A design pattern isn"t a finished design that can be transformed directly into code."}, {"question": "What are the advantages and disadvantages of applying a pattern?", "answer": "This might be both advantages and disadvantages of applying the pattern."}, {"question": "What is a design pattern?", "answer": "A design pattern is a general repeatable solution to a commonly occurring problem in software design."}, {"question": "What is the purpose of a pattern?", "answer": "Solution: Assign a responsibility to the class that has the information needed to fulfill it."}, {"question": "What is a pattern?", "answer": "In OO design, a pattern is a named description of a problem and solution that can be applied to new contexts; ideally, a pattern advises us on how to apply its solution in varying circumstances and considers the forces and trade-offs."}, {"question": "What is the purpose of the description?", "answer": "The description is on an abstract level to make sure that it can be applied in many situations."}, {"question": "What is the purpose of the pattern?", "answer": "Problem description: In this section, the problem is described that is the reason for applying the pattern."}, {"question": "What are the main components of a pattern?", "answer": "A pattern is usually described in four components; these components explain what it is about and how it is to be used."}, {"question": "What is the purpose of a pattern?", "answer": "Additionally, the pattern helps in the communication among software developers – using the name of the pattern conveys a large amount of knowledge in a very dense way."}, {"question": "What are the consequences of applying a pattern?", "answer": "The consequences are often related to the impact on flexibility, extensibility and portability the application of the pattern has For example, here is a sample pattern: Pattern Name: Information Expert Problem: What is a basic principle by which to assign responsibilities to objects?"}, {"question": "What is the meaning of a pattern?", "answer": "Many patterns, given a specific category of problem, guide the assignment of responsibilities to objects."}, {"question": "What is a pattern?", "answer": "It is a description or template for how to solve a problem that can be used in many different situations."}, {"question": "What is the meaning of design patterns?", "answer": "• The solution."}, {"question": "What are the advantages of naming a pattern?", "answer": "• Patterns allow developers to communicate using well-known, well understood names for software interactions."}, {"question": "What is the name of the pattern?", "answer": "Information Expert 2."}, {"question": "What is the main purpose of a design pattern?", "answer": "The creation of objects is one of the most common activities in an object-oriented system."}, {"question": "What are the nine GRASP patterns?", "answer": "There are nine GRASP patterns: • Creator • Information Expert • Controller • Low Coupling?"}, {"question": "What is the name of the pattern?", "answer": "Facade 5."}, {"question": "What are the advantages of naming a pattern?", "answer": "• It facilitates communication."}, {"question": "What is the name of the pattern?", "answer": "Creator 3."}, {"question": "What are the advantages of naming a design pattern?", "answer": "Common design patterns can be improved over time, making them more robust than ad-hoc designs."}, {"question": "What is the name of the GRASP pattern?", "answer": "Intermediary pattern or proxy Applying GRASP to Object Design GRASP stands for General Responsibility Assignment Software Patterns."}, {"question": "Why is GRASP named?", "answer": "The name was chosen to suggest the importance of grasping these principles to successfully design object-oriented software."}, {"question": "What are the most common design patterns?", "answer": "The design pattern solutions are typically described in terms of class and interaction diagrams."}, {"question": "What are the main advantages of designing a pattern?", "answer": "We now describe a few important patterns: 1."}, {"question": "What are the advantages of designing a pattern?", "answer": "In addition to providing the model of a good solution, design patterns include a clear specification of the problem, and also explain the circumstances in which the solution would and would not work."}, {"question": "What are the advantages of naming a design pattern?", "answer": "Model view Separation pattern 6."}, {"question": "What are the advantages of naming a design pattern?", "answer": "Assigned well, the design can support low coupling, increased clarity, encapsulation, and reusability."}, {"question": "What is the meaning of a design pattern?", "answer": "• The context within which the solution works."}, {"question": "What is the name of the pattern?", "answer": "Controller 4."}, {"question": "What is the name of the design pattern?", "answer": "High Cohesion."}, {"question": "What are the most common design patterns?", "answer": "These are often given in a parameterized form."}, {"question": "What are the advantages of designing a software?", "answer": "Design patterns are very useful in creating good software design solutions."}, {"question": "What are the benefits of naming a design pattern?", "answer": "• Pure Fabrication • Indirection • Polymorphism • Protected Variations 1."}, {"question": "What is the purpose of a design pattern?", "answer": "Consequently, it is useful to have a general principle for the assignment of creation responsibilities."}, {"question": "What are the advantages of naming a pattern?", "answer": "Advantages Naming a pattern, design idea, or principle has the following advantages: • It supports chunking and incorporating that concept into our understanding and memory."}, {"question": "What are the benefits of designing patterns?", "answer": "Uses of Design Patterns • Design patterns can speed up the development process by providing tested, proven development paradigms • Design patterns provide general solutions, documented in a format that doesn"t require specifics tied to a particular problem."}, {"question": "What are the four important parts of a design pattern?", "answer": "Thus, a design pattern has four important parts: • The problem."}, {"question": "What is the purpose of the design pattern?", "answer": "Creator Problem :Who should be responsible for creating a new instance of some class?"}, {"question": "What is the meaning of a design pattern?", "answer": "• The context in which the problem occurs."}, {"question": "What should be the solution to the problem?", "answer": "Also, the same controller should be used for all the actor requests pertaining to one use case so that it becomes possible to maintain the necessary information about the state of the use case."}, {"question": "What is the problem with the class B?", "answer": "4."}, {"question": "What is the problem with a package?", "answer": "Context in which the problem occurs: A package as already discussed is a cohesive set of classes – the classes have strongly related responsibilities."}, {"question": "What can be used to identify out-of-sequence requests?", "answer": "The state information maintained by a controller can be used to identify the out-ofsequence actor requests, e."}, {"question": "What is the definition of a creator of A objects?", "answer": "* B is a creator of A objects."}, {"question": "What does B do?", "answer": "* B closely uses A."}, {"question": "Who should be responsible for handling the actor requests?", "answer": "Controller Problem: Who should be responsible for handling the actor requests?"}, {"question": "What is the common pattern in a problem?", "answer": "Context in which the problem occurs: This is a very commonly occurring pattern which occurs in almost every problem."}, {"question": "What is the expert pattern?", "answer": "The expert pattern expresses the common intuition that objects do things related to the information they have."}, {"question": "What is the problem with class B?", "answer": "g."}, {"question": "Who is responsible for doing what?", "answer": "Solution: Assign responsibility to the information expert – the class that has the information necessary to fulfill the required responsibility."}, {"question": "What is the solution to the problem of class B?", "answer": "2."}, {"question": "Who should be responsible for doing certain things?", "answer": "Information Expert Problem: Which class should be responsible for doing certain things?"}, {"question": "What is the problem with class B?", "answer": "5."}, {"question": "What is the problem with a package?", "answer": "For example, an RDBMS interface package may contain classes that allow one to perform various operations on the RDBMS."}, {"question": "What is the solution to the problem of class B?", "answer": "3."}, {"question": "Which class should be responsible for doing certain things?", "answer": "If more than one option applies, usually prefer a class B which aggregates or contains class A."}, {"question": "What is the best way to solve the problem?", "answer": "* B records A."}, {"question": "What is the solution to the problem?", "answer": "Solution Assign class B the responsibility to create an instance of class A if one of these is true (the more the better): * B "contains" or compositely aggregates A."}, {"question": "What is the problem of the DBfacade?", "answer": "Façade Pattern: Problem: How should the services be requested from a service package?"}, {"question": "What is the definition of the domain layer objects?", "answer": "Here, model is a synonym for the domain layer objects, view is a synonym for the presentation layer objects such as the GUI objects."}, {"question": "What is the difference between B and A?", "answer": "Thus B is an Expert with respect to creating A."}, {"question": "What is the problem with the model view?", "answer": "Model view Separation Pattern Problem: How should the non-GUI classes communicate with the GUI classes?"}, {"question": "What is the solution to the problem?", "answer": "Solution: For every use case, there should be a separate controller object which would be responsible for handling requests from the actor."}, {"question": "What is the state of the actor request?", "answer": "whether voucher request is received before arrange payment request."}, {"question": "What is the problem with class B?", "answer": "* B has the initializing data for A that will be passed to A when it is created."}, {"question": "What is the solution to the problem?", "answer": "Solution: A class (such as DBfacade) can be created which provides a common interface to the services of the package."}, {"question": "What is the proxy"s role?", "answer": "The proxy hides the details of the network transmission."}, {"question": "What is the role of the proxy?", "answer": "The proxy is responsible for determining the server address, communicating the client request to the server, obtaining the server response and seamlessly passing that to the client."}, {"question": "What is the responsibility of the GUI objects to ask for the information from the other objects whenever required?", "answer": "the GUI objects pull the necessary information from the other objects whenever required."}, {"question": "What is the solution to the problem?", "answer": "Solution: The model view separation pattern states that model objects should not have direct knowledge (or be directly coupled) to the view objects."}, {"question": "What is the definition of low coupling?", "answer": "Low Coupling : “Coupling is a measure of how strongly one element is connected to, has knowledge of, or relies on other elements."}, {"question": "What is the importance of low coupling?", "answer": "Low coupling is especially important with unstable objects."}, {"question": "What is the best solution to the problem?", "answer": "The proxy could have the same interface as the remote server object so that the client feels as if it is interacting directly with the remote server object and the complexities of network transmissions are abstracted out."}, {"question": "What is the best solution to the problem?", "answer": "e."}, {"question": "What is the solution to the problem?", "answer": "Solution: A proxy object at the client side can be defined which is a local sit-in for the remote server object."}, {"question": "What is the responsibility of a GUI object to ask for the relevant information from the other objects?", "answer": "There are actually two solutions to this problem which work in different circumstances as follows: Solution 1: Polling or Pull from above It is the responsibility of a GUI object to ask for the relevant information from the other objects, i."}, {"question": "What is the best solution to the problem?", "answer": "This results in a good solution, because the GUI classes are related to a particular application whereas the other classes may be reused."}, {"question": "What is the definition of a model view separation pattern?", "answer": "7."}, {"question": "What is the solution to the problem?", "answer": "Solution 2: Publish- subscribe pattern An event notification system is implemented through which the publisher can indirectly notify the subscribers as soon as the necessary information becomes available."}, {"question": "What is the problem of the intermediary pattern?", "answer": "Intermediary Pattern or Proxy Problem: How should the client and server objects interact with each other?"}, {"question": "What is the principle of the model view separation pattern?", "answer": "This principle can often be broken down to knowledge: when classes can exist without having knowledge of each other, this knowledge should not be added."}, {"question": "What is the definition of a low coupling pattern?", "answer": "An element with low (or weak) coupling is not dependent on too many other elements."}, {"question": "What is the difference between the client and server?", "answer": "The clients are consumers of services provided by the servers."}, {"question": "What is the meaning of the term?", "answer": "Context in the problem occurs: The client and server terms as used here refer to software components existing across a network."}, {"question": "How does the publisher publish an event?", "answer": "An event is published by the publisher by sending a message to the event manager object."}, {"question": "What are the elements that should not be directly coupled to the view objects?", "answer": "These elements include classes, subsystems, systems, and so on."}, {"question": "What is the role of the proxy?", "answer": "The proxy can also augment (or filter) information that is exchanged between the client and the server."}, {"question": "What is the design principle of this pattern?", "answer": "” The design principle of this pattern is to assign the responsibilities so that coupling remains low."}, {"question": "What is the solution to the problem?", "answer": "An event manager class can be defined which keeps track of the subscribers and the types of events they are interested in."}, {"question": "What is the solution to the model view separation problem?", "answer": "6."}, {"question": "What does the model view separation pattern mean?", "answer": "This means that there should not be any direct calls from other objects to the GUI objects."}, {"question": "What are the elements that have high cohesion?", "answer": "These elements include classes, subsystems, and so on."}, {"question": "What are the patterns that are most specifically concerned with communication between objects?", "answer": "Behavioral patterns are those patterns that are most specifically concerned with communication between objects."}, {"question": "What are the main categories of patterns?", "answer": "Patterns are classified into 1) Design Pattern, 2) Architectural Pattern, 3) Macro – Architecture, 4) Micro – Architecture, 5) Idioms or Coding Patterns, 6) Language Paradigms etc."}, {"question": "What is the difference between class-creation patterns and object-creation patterns?", "answer": "Structural class-creation patterns use inheritance to compose interfaces."}, {"question": "What is a pattern?", "answer": "It is a solution to a problem in a context."}, {"question": "What is the difference between the two patterns?", "answer": "Creational Pattern 2."}, {"question": "What is the difference between a class and a design pattern?", "answer": "The class becomes incomprehensible and unmaintainable."}, {"question": "What is the definition of pattern?", "answer": "Here it goes: Pattern: A pattern is a way of doing something, or a way of pursuing intent."}, {"question": "What is the meaning of pattern?", "answer": "Structural Pattern 3."}, {"question": "What is the difference between a class and an object?", "answer": "Structural design patterns This design patterns is all about Class and Object composition."}, {"question": "What is the meaning of a pattern?", "answer": "Behavioral design patterns This design patterns is all about Class"s objects communication."}, {"question": "What are the terms used interchangeably?", "answer": "com/ Pattern Vs Design Pattern Vs Framework The terms Pattern, Design Pattern and Framework are most often used interchangeably."}, {"question": "What is the difference between a creational pattern and a behavioural pattern?", "answer": "Behavioral Pattern Creational design patterns This design patterns is all about class instantiation."}, {"question": "How do you partition a factory class?", "answer": "The solution is to partition of the factory class, in the same way as the objects being created are partitioned."}, {"question": "What is the problem with factory classes?", "answer": "This problem often arises with factory classes, being designed for the creation of objects."}, {"question": "What are the differences between the terms?", "answer": "However, these terms are not identical and there is a logical difference among their definitions."}, {"question": "What is the definition of pattern?", "answer": "oodesign."}, {"question": "What is the difference between class-creation patterns and object-creation patterns?", "answer": "While class-creation patterns use inheritance effectively in the instantiation process, object-creation patterns use delegation effectively to get the job done."}, {"question": "What are the two types of patterns?", "answer": "This pattern can be further divided into class-creation patterns and object-creational patterns."}, {"question": "What is the definition of a high cohesion element?", "answer": "An element with highly related responsibilities, an which does not do a tremendous amount of work, has high cohesion."}, {"question": "What is the definition of a pattern?", "answer": "” It is undesirable in OOD and OOP to have classes which have hundreds of methods and attributes - for the sake of maintainability and usability it is necessary to partition the responsibilities of this class functionally and draw them out to different classes."}, {"question": "What are the patterns in a class?", "answer": "Gang of Four (GoF) Patterns in Object : 1."}, {"question": "What is the definition of a pattern?", "answer": "For more Visit link : http://www."}, {"question": "What is the definition of cohesion?", "answer": "Low Cohesion : “Cohesion is a measure of how strongly related and focused the responsibilities of an element are."}, {"question": "What is the meaning of pattern?", "answer": "This idea applies to cooking, making fireworks, developing software, and to any other craft."}, {"question": "What are the definitions of a structure?", "answer": "Structural object-patterns define ways to compose objects to obtain new functionality."}, {"question": "What is the meaning of pattern?", "answer": "8."}, {"question": "How many methods can be used in a factory class?", "answer": "When the types of objects get numerous in a system, the factory class can consist of a collection of a hundred and more methods."}, {"question": "What is the difference between a design pattern and a framework?", "answer": "Above definition very much clarifies the difference among three."}, {"question": "What are the main characteristics of a design pattern?", "answer": ", reuse, extensibility, modularity, performance 1 | P a g e O O A D : O b j e c t O r i e n t e d D e s i g n - - - - h p o k h r e l 2 4 @ g m a i l."}, {"question": "What is a design pattern?", "answer": "Patterns support reuse of software architecture and design – Patterns capture the static and dynamic structures and collaborations of successful solutions to problems that arise when building applications in a particular domain Frameworks support reuse of detailed design and code – A framework is an integrated set of components that collaborate to provide a reusable architecture for a family of related application Together, design patterns and frameworks help to improve software quality and reduce development time – e."}, {"question": "What is a design pattern?", "answer": "It is a large entity comprising of several design patterns."}, {"question": "What is a design pattern?", "answer": "g."}, {"question": "what is a design pattern?", "answer": "c o m 1 | P a g e O O A D : O b j e c t O r i e n t e d D e s i g n - - - - h p o k h r e l 2 4 @ g m a i l."}, {"question": "What is a design pattern?", "answer": "They represent solutions to problems that arise when developing software within a particular context."}, {"question": "What is a design pattern?", "answer": "Frameworks are concerned with specific application domain e."}, {"question": "What is a design pattern?", "answer": "Frameworks are written in programming languages."}, {"question": "What is a design pattern?", "answer": "A design pattern is a type of pattern and is more like a concept, whereas a framework is something already coded to be used repetitively."}, {"question": "What is a design pattern?", "answer": "database, web application etc."}, {"question": "What is a design pattern?", "answer": "They can be used across different domains."}, {"question": "what is a framework?", "answer": "Framework: Framework is made up of group of concrete classes which can be directly implemented on an existing platform."}, {"question": "What is a design pattern?", "answer": "Design pattern captures the static and dynamic structure and collaboration among key participants in software designs."}, 
{"question": "What is a design pattern?", "answer": "Design Pattern: Design pattern is a category of patterns that deals with object oriented software."}]