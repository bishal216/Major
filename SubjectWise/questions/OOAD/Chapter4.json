[{"question": "What is the strength of use cases of OO programming?", "answer": "A strength of use cases plus OOA/D plus OO programming is that they provide an end-to-end roadmap from requirements through to code.":'
 {"question": "What is the point of having a roadmap?", "answer": "But having a roadmap provides a starting point for experimentation and discussion.":'
 {"question": "What is the strength of an iterative and incremental development process?", "answer": "A strength of an iterative and incremental development process is that the results of a prior iteration can feed into the beginning of the next iteration (see Figure ).":'
 {"question": "What is the definition of a class in a OO language?", "answer": "1 Fig 4.":'
 {"question": "What is the best way to create a class definition in a OO language?", "answer": ") generated during OO design modeling will provide a great base that scales up with elegance and robustness to meet the new problems encountered during programming.":'
 {"question": "What is the main difference between the create method and the class diagram?", "answer": "The create method is often excluded from the class diagram because of its commonality and multiple interpretations, depending on the target language.":'
 {"question": "What languages are amenable to the object design principles and mapping to code presented in this case?", "answer": "However, this is not meant to imply a special endorsement of Java; C#, Visual Basic, C++, Smalltalk, Python, and many more languages are amenable to the object design principles and mapping to code presented in this case study.":'
 {"question": "What is the definition of a class?", "answer": "1 Defining a Class with Method Signatures and Attributes From the DCD, a mapping to the attribute definitions (Java fields) and method signatures for the Java definitionof SalesLineItem is straightforward, as shown in Figure 4.":'
 {"question": "What is the implementation model?", "answer": "This is all the implementation artifacts, such as the source code, database definitions, JSP/XML/HTML pages, and so forth.":'
 {"question": "What is the meaning of the passage?", "answer": ".":'
 {"question": "What is the UP Implementation Model?", "answer": "Thus, the code being created in this chapter can be considered part of the UP Implementation Model.":'
 {"question": "What is the key and pragmatic attitude in iterative and evolutionary methods?", "answer": "That"s a key and pragmatic attitude in iterative and evolutionary methods.":'
 {"question": "How can a class be created from a diagram?", "answer": "If the DCD was drawn in a UML tool, it can generate the basic class definition from the diagrams.":'
 {"question": "What is the basic class definition in OO?", "answer": "This is sufficient to create a basic class definition in an OO language.":'
 {"question": "What is the addition in the source code of the constructor?", "answer": "Note the addition in the source code of the Java constructor SalesLineItem(.":'
 {"question": "What is the definition of a class in a OO language?", "answer": "2.":'
 {"question": "What is the key attitude in iterative and evolutionary methods?", "answer": "But, expect and plan for lots of change and deviation from the design during programming.":'
 {"question": "What is the definition of a UP implementation model?", "answer": "2 Mapping Designs to Code In UP terms, there exists an Implementation Model.":'
 {"question": "What is the definition of a class in a OO language?", "answer": "3.":'
 {"question": "What is the best way to create a class definition?", "answer": "3 Creating Class Definitions from DCDs (Design Class Diagrams) At the very least, DCDs depict the class or interface name, super classes, operation signatures, and attributes of a class.":'
 {"question": "What is the definition of a sales line item in java?", "answer": "1: SalesLineItem in Java.":'
 {"question": "Why is Java used for the examples?", "answer": "1 Language Samples Java is used for the examples because of its widespread use and familiarity.":'
 {"question": "What is the definition of a class?", "answer": "2 Mapping Designs to Code Implementation in an object-oriented language requires writing source code for: • Class and interface definitions • Method definitions 4.":'
 {"question": "What is the meaning of the sentence?", "answer": ").":'
 {"question": "What is the derived value of the constructor?", "answer": "It is derived from the create(desc, qty) message sent to a SalesLineItem in the enterItem interaction diagram.":'
 {"question": "What is the best way to describe a class?", "answer": "Done well, the ideas and understanding (not the diagrams or documents!":'
 {"question": "What does the constructor indicate?", "answer": "This indicates, in Java, that a constructor supporting these parameters is required.":'
 {"question": "What is the name of the end of an association?", "answer": "Each end of an association is called a role.":'
 {"question": "What is the definition of a reference attribute in a class diagram?", "answer": "4.":'
 {"question": "What is the name of the class?", "answer": "Fig: Role names may be used to generate instance variable names.":'
 {"question": "What is the definition of a reference attribute in a class diagram?", "answer": "For example, although we have added an instance field to the Java definition of SalesLineltem to point to a ProductSpecification, it is not explicitly declared as an attribute in the attribute section of the class box.":'
 {"question": "What is the diagram of the enterItem interaction?", "answer": "The enterItem interaction diagram in Figure 4.":'
 {"question": "What is a role name?", "answer": "Briefly, a role name is a name that identifies the role and often provides some semantic context as to the nature of the role.":'
 {"question": "What is the definition of the enterItem method?", "answer": "2 illustrates the Java definition of the enterItem method.":'
 {"question": "What are the attributes of a class suggested by?", "answer": "The reference attributes of a class are suggested by the associations and navigability in a class diagram.":'
 {"question": "What is the definition of the fig?", "answer": "Fig: Mapping date and time to Java.":'
 {"question": "What is the definition of reference attribute in a class diagram?", "answer": "2 Adding Reference Attributes A reference attribute is an attribute that refers to another complex object, not to a primitive type such as a String, Number, and so on.":'
 {"question": "What does a reference attribute mean in Java?", "answer": "In Java, this means that an instance field referring to a ProductSpecification instance is suggested.":'
 {"question": "What is the definition of the register?", "answer": "For this example, we will explore the implementation of the Register and its enterItem method.":'
 {"question": "What is the definition of a reference attribute in a class diagram?", "answer": "2.":'
 {"question": "What is the meaning of the following paragraph?", "answer": "4 Creating Methods from Interaction Diagrams The sequence of the messages in an interaction diagram translates to a series of statements in the method definitions.":'
 {"question": "What is the definition of a reference attribute in a class diagram?", "answer": "3.":'
 {"question": "What is the problem in the diagram?", "answer": "Figure fig illustrates the problem and its resolution.":'
 {"question": "What is the meaning of the definition of a class?", "answer": "Fig: Adding Reference Attributes Note that reference attributes of a class are often implied, rather than explicit, in a DCD.":'
 {"question": "What is the definition of a reference attribute?", "answer": "There is a suggested attribute visibility—indicated by the association and navigability—which is explicitly defined as an attribute during the code generation phase.":'
 {"question": "What is the definition of a sale class?", "answer": "4 Mapping Attributes The Sale class illustrates that in some cases one must consider the mapping of attributes from the design to the code in different languages.":'
 {"question": "What is the next iteration of the article?", "answer": "3 Reference Attributes and Role Names The next iteration will explore the concept of role names in static structure diagrams.":'
 {"question": "What is the definition of a role name in a class diagram?", "answer": "If a role name is present in a class diagram, use it as the basis for the name of the reference attribute during code generation, as shown in Figure below.":'
 {"question": "What is the meaning of the term reference attribute?", "answer": "For example, a SalesLineItem has an association to a ProductSpecification, with navigability to it.":'
 {"question": "What is the common definition of a reference attribute in a class?", "answer": "It is common to interpret this as a reference attribute in class SalesLineItem that refers to a ProductSpecification instance (see Figure below).":'
 {"question": "What is the class register?", "answer": "3 Fig: The Register class.":'
 {"question": "What is the relationship between the enterItem method and the interaction diagram?", "answer": "4.":'
 {"question": "What are the main reasons for using interfaces?", "answer": "Interfaces are used of flexibility reasons: • Programs that uses an interface is not tightened to a specific implementation of a collection.":'
 {"question": "What is the message sent to the Sale?", "answer": "getProductDescription(itemID); Message 2: The makeLineItem message is sent to the Sale.":'
 {"question": "What is the name of the enterItem method?", "answer": "currentSale.":'
 {"question": "What is the relationship between the enterItem method and the product?", "answer": "In real worlds,One-to-many relationships are common.":'
 {"question": "What is the relationship between the enterItem method and the osc?", "answer": "• Heterogeneous.":'
 {"question": "What is the relationship between a sale and a group of sales?", "answer": "For example, a Sale must maintain visibility to a group of many SalesLineItem instances, as shown in Figure 4.":'
 {"question": "What are the interfaces used for?", "answer": "Collection Interfaces Collections are primarily defined through a set of interfaces.":'
 {"question": "What classes in the code are used to isolate client programs from the implementation?", "answer": "array, linked list, hash table, balanced binary tree • Insulate client programs from the implementation.":'
 {"question": "What is the enterItem interaction diagram?", "answer": "2 : The enterItem interaction diagram.":'
 {"question": "What is the product description?", "answer": "ProductDescription desc = catalog.":'
 {"question": "What is the type of interface used to insulate a client program from the implementation?", "answer": "n array, linked list, hash table, balanced binary tree • Like C++"s Standard Template Library (STL)?":'
 {"question": "What is the difference between a collection and a client program?", "answer": "• Collection classes insulate client programs from the implementation.":'
 {"question": "What is the relationship between the enterItem method and the product description?", "answer": "5.":'
 {"question": "What is the relationship between a collection and a sale?", "answer": "In OO programming languages, these relationships are usually implemented with the introduction of a collection object, such as a List or Map, or even a simple array.":'
 {"question": "What is the difference between the two types of objects?", "answer": "• Can be made thread safe (concurrent access).":'
 {"question": "What is the enterItem method defined in?", "answer": "The enterItem message is sent to a Register instance; therefore, the enterItem method is defined in class Register.":'
 {"question": "What is the relationship between the enterItem method and the Java method?", "answer": "makeLineItem(desc, qty); In summary, each sequenced message within a method, as shown on the interaction diagram, is mapped to a statement in the Java method.":'
 {"question": "What type of objects are used in the enterItem method?", "answer": "• Contain only Objects (reference types).":'
 {"question": "What is the interaction diagram for the enterItem method?", "answer": "Fig 4.":'
 {"question": "What is the difference between the two types of objects?", "answer": "• Can be made not-modifiable.":'
 {"question": "What is the name of the class that is used to insulate a client program from?", "answer": "Eg.":'
 {"question": "What is the name of the enterItem method?", "answer": "public void enterItem(ItemID itemID, int qty) Message 1: A getProductDescription message is sent to the ProductCatalog to retrieve a ProductDescription.":'
 {"question": "What is the"stl"?", "answer": "Can grow as necessary.":'
 {"question": "What are the interfaces used by?", "answer": "Supported by a set of classes that implement the interfaces.":'
 {"question": "What is the relationship between a collection and a bag?", "answer": "Corresponds to a bag.":'
 {"question": "What is the complete enterItem method and its relationship to the interaction diagram?", "answer": "The complete enterItem method and its relationship to the interaction diagram is shown in Figure 4.":'
 {"question": "What is the definition of a collection?", "answer": "5 Collection Classes in Code A collection is a group of data manipulate as a single object.":'
 {"question": "What is the difference between ArrayList and LinkedList?", "answer": "As a small point, note that the lineItems attribute is declared in terms of its interface.":'
 {"question": "What is the definition of lineItems in Java?", "answer": "For example, in Figure the definition for the lineItems attribute demonstrates this guideline: private List lineItems = new ArrayList(); Collections in Java ArrayList : • is an array based implementation where elements can be accessed directly via the get and set methods.":'
 {"question": "What is the difference between ArrayList and LinkedList?", "answer": "The choice of collection class is of course influenced by the requirements; key-based lookup requires the use of a Map, a growing ordered list requires a List, and so on.":'
 {"question": "What is the difference between ArrayList and LinkedList?", "answer": "LinkedList • is based on a double linked list n Gives better performance on add and remove compared to ArrayList.":'
 {"question": "What is the difference between Array and Collection Array?", "answer": "• Fixed size.":'
 {"question": "What is the difference between ArrayList and LinkedList?", "answer": "• Gives poorer performance on get and set methods compared to ArrayList.":'
 {"question": "What is the difference between ArrayList and LinkedList?", "answer": "• Resizable.":'
 {"question": "What is the main difference between ArrayList and LinkedList?", "answer": "6 Exceptions and Error Handling Exception handling has been ignored so far in the development of a solution.":'
 {"question": "What is the best way to change the underlying collection class?", "answer": "• It is easy to change or replace the underlying collection class with another (more efficient) class that implements the same interface.":'
 {"question": "What is the difference between ArrayList and LinkedList?", "answer": "Example : Use of LinkedList Collection type 4.":'
 {"question": "What is the difference between ArrayList and LinkedList?", "answer": "However, in application development, it"s wise to consider the large-scale exception handling strategies during design modeling (as they have a large-scale architectural impact), and certainly during implementation.":'
 {"question": "What is the purpose of the article?", "answer": "This was intentional to focus on the basic questions of responsibility assignment and object design.":'
 {"question": "What is the difference between Array and LinkedList?", "answer": "• Set of interfaces defined in Java for storing object.":'
 {"question": "What is the difference between ArrayList and LinkedList?", "answer": "Using ArrayList, the Sale class can define an attribute that maintains an ordered list of SalesLineItem instances.":'
 {"question": "What is the default choice for simple sequence?", "answer": "• Default choice for simple sequence.":'
 {"question": "What are the two examples of ArrayList?", "answer": "Example : Fig: Adding Collection For example, the Java libraries contain collection classes such as ArrayList and HashMap, which implement the List and Map interfaces, respectively.":'
 {"question": "What is the difference between ArrayList and LinkedList?", "answer": "Briefly, in terms of the UML, exceptions can be indicated in the property strings of messages and operation declarations.":'
 {"question": "What is the difference between ArrayList and LinkedList?", "answer": "Note: The classes ArrayList and LinkedList implement the List interface.":'
 {"question": "What is the difference between Array and Collection Array?", "answer": "Difference between Array and Collection Array • Holds objects of known type.":'
 {"question": "What is the difference between Array and LinkedList?", "answer": "Collections • Generalization of the array concept.":'
 {"question": "What is the difference between ArrayList and LinkedList?", "answer": "• Multiple types of objects.":'
 {"question": "What is the best way to declare an interface?", "answer": "Guideline: If an object implements an interface, declare the variable in terms of the interface, not the concrete class.":'
 {"question": "What is the definition of an exception?", "answer": "I f the exception object is not caught and handled properly; the interpreter will display an error and terminate the program.":'
 {"question": "What are the types of exceptions that are ignored?", "answer": "Errors: These are not exceptions at all, but problems that arise beyond the control of the user or the programmer.":'
 {"question": "What is the definition of an exception?", "answer": "Provide a mechanism to signal errors directly without using flags.":'
 {"question": "What is the definition of an exception?", "answer": "Allow errors to be handled in one central part of the code without cluttering code.":'
 {"question": "What are some common examples of exceptions?", "answer": "• A network connection has been lost in the middle of communications, or the JVM has run out of memory.":'
 {"question": "What is an exception?", "answer": "To understand how exception handling works, you need to understand the three categories of exceptions: Checked exceptions: A checked exception is an exception that is typically a user error or a problem that cannot be foreseen by the programmer.":'
 {"question": "When are runtime exceptions ignored?", "answer": "They are also ignored at the time of compilation.":'
 {"question": "When are runtime exceptions ignored?", "answer": "As opposed to checked exceptions, runtime exceptions are ignored at the time of compilation.":'
 {"question": "What is an exception?", "answer": "An exception is a condition that is caused by a runtime error in the program.":'
 {"question": "What is an exception?", "answer": "An exception is a problem that arises during the execution of a program.":'
 {"question": "What is an exception?", "answer": "• A file that needs to be opened cannot be found.":'
 {"question": "What is an exception?", "answer": "Runtime exceptions: A runtime exception is an exception that occurs that probably could have been avoided by the programmer.":'
 {"question": "What is the definition of an exception?", "answer": "If we want the program to continue with execution of the remaining code, then we should try to catch the exception object thrown by the error condition and then take appropriate corrective actions.":'
 {"question": "Why are exceptions ignored in Java?", "answer": "Errors are typically ignored in your code because you can rarely do anything about an error.":'
 {"question": "What is an exception?", "answer": "For example, if a file is to be opened, but the file cannot be found, an exception occurs.":'
 {"question": "What is an exception?", "answer": "When the JVM(Java Virtual Machine) encounters an error such as divide by zero, it creates an exception object and throws it – as a notification that an error has occurred.":'
 {"question": "What is the definition of an exception?", "answer": "These exceptions cannot simply be ignored at the time of compilation.":'
 {"question": "What is the name of the task?", "answer": "This task is known as exception handling.":'
 {"question": "What are some common examples of exceptions?", "answer": "Some of these exceptions are caused by user error, others by programmer error, and others by physical resources that have failed in some manner.":'
 {"question": "What is the definition of an exception?", "answer": "For example, if a stack overflow occurs, an error will arise.":'
 {"question": "What are some common exceptions?", "answer": "An exception can occur for many different reasons, including the following: • A user has entered invalid data.":'
 {"question": "What are the rules for a throwable exception?", "answer": "Keep the following points in mind when writing your own exception classes: • All exceptions must be a child of Throw able.":'
 {"question": "What is the difference between a runtime exception and a checkable exception?", "answer": "• If you want to write a runtime exception, you need to extend the RuntimeException class.":'
 {"question": "what is the simplest way to handle an exception?", "answer": "If no ‘local’ catch found, exception propagates up the method call stack, all the way to main()?":'
 {"question": "What are considered to be checked exceptions?", "answer": "These are considered to be checked exceptions.":'
 {"question": "what is the java class hierarchy?", "answer": "Any execution of try, normal completion, or catch then transfers control on to finally block Fig: Example of Exception Handling Fig: Example of Exception Handling with finely Example of Exception Hierarchy in Java Fig: Exception class hierarchy in java Fig: Exception class hierarchy in C# Declaring you own Exception(User defined Exceptions): You can create your own exceptions.":'
 {"question": "what can be done to clean up an exception?", "answer": "• StackOverflowException • StringIndexOutOfBoundException Exception Handling Process • A method can signal an error condition by throwing an exception – throws • The calling method can transfer control to a exception handler by catching an exception - try, catch • Clean up can be done by – finally?":'
 {"question": "what type of exception is invoked?", "answer": "First block to have appropriate type of exception is invoked.":'
 {"question": "what is the java exception class?", "answer": "• ArithmeticException • ArrayIndexOutOfBoundException • ArrayStoreException • FileNotFoundException • IOException – general I/O failure • NullPointerException – referencing a null object • OutOfMemoryException • SecurityException – when applet tries to perform an action not allowed by the browser’s security setting.":'
 {"question": "what type of exceptions can be caught?", "answer": "Try block, code that could have exceptions errors?":'
 {"question": "what is an exception class?", "answer": "An exception class is like any other class, containing useful fields and methods.":'
 {"question": "What is the definition of a check exception?", "answer": "• If you want to write a checked exception that is automatically enforced by the Handle or Declare Rule, you need to extend the Exception class.":'
 {"question": "what is the Exception class?", "answer": "The following InsufficientFundsException class is a user-defined exception that extends the Exception class, making it a checked exception.":'
 {"question": "What type of exceptions can be caught?", "answer": "Catch block(s), specify code to handle various types of exceptions.":'
 {"question": "What is the name of the exception class?", "answer": "?":'
 {"question": "what is the Exception class?", "answer": "You just need to extend(inherit) the Exception class to create your own Exception class.":'
 {"question": "What is the order of the class implementation and testing?", "answer": "Fig: Possible order of class implementation and testing.":'
 {"question": "What are the main uses of exceptions?", "answer": "• Exceptions are mainly used to deal with runtime errors.":'
 {"question": "What is the difference between a code and an error?", "answer": "• Another part of the code (the error handling part) catches the exception (object) and make necessary actions needed in that error situation.":'
 {"question": "What is the name of the class MyException?", "answer": "*; public class InsufficientFundsException extends Exception  private double amount; public InsufficientFundsException(double amount)  this.":'
 {"question": "What are the basic principles of exception handling?", "answer": "• Exception handling mechanisms can effectively used to locate the type and place of errors.":'
 {"question": "What is the name of the class MyException?", "answer": "io.":'
 {"question": "What is the basic principle of java code generation?", "answer": "The code generation is largely derived from the design class diagrams and interaction diagrams defined in the design work, based on the principles of mapping designs to code as previously explored.":'
 {"question": "What is the basic principle of exception handling?", "answer": "amount = amount;  public double getAmount()  return amount;   The fundamentals of exception handling • The "normal" code is put in try block.":'
 {"question": "What is the best way to handle a program?", "answer": "• I t is always a good practice to check for potential problem spots in programs and guard against program failures.":'
 {"question": "What is the code for java?", "answer": "Implementation Code For Case Study This section presents a sample domain object layer program solution in Java for this iteration.":'
 {"question": "What classes are possible to implement?", "answer": "For example, possible first classes to implement are either Payment or ProductDescription; next are classes only dependent on the prior implementations— ProductCatalog or SalesLineItem.":'
 {"question": "What does it mean to try to execute code in java?", "answer": "It means that we "try to execute code" in the try block.":'
 {"question": "What is the basic principle of java exception handling?", "answer": "• If something goes wrong when code of try block is executed, this code throws an exception object and stops executing the code of try block further.":'
 {"question": "What is the definition of a good program?", "answer": "Summary of Exception Handling • A good programs does not produce unexpected results.":'
 {"question": "What are the main functions of exceptions?", "answer": "• Exceptions also aid in debugging programs.":'
 {"question": "What is the basic principle of java exception handling?", "answer": "• If the system succeeds to run the code, everything is fine (execution goes in order from top to down, catch blocks are skipped).":'
 {"question": "What is the name of the class MyException?", "answer": "java import java.":'
 {"question": "What is the order of implementation of a class?", "answer": "Order of Implementation Classes need to be implemented (and ideally, fully unit tested) from least-coupled to mostcoupled (see Figure ).":'
 {"question": "What is the purpose of the exception object?", "answer": "Execution continues with the next statement following the catch blocks • The exception object can contain information about the exception, so that the error handling part of the program can examine the reason and make appropriate actions.":'
 {"question": "What is the name of the class MyException?", "answer": "Example of user defined exception in java: class MyException extends Exception   // File Name InsufficientFundsException.":'
 {"question": "what is nextgen POS?", "answer": "Introduction to the NextGen POS Program Solution Class Payment // all classes are probably in a package named // something like: package com.":'
 {"question": "what is the nextgen POS program?", "answer": "put( id1, desc ); desc = new ProductDescription( id2, price, "product 2" ); descriptions.":'
 {"question": "what is the nextgen POS program?", "answer": "becomeComplete();  public void enterItem( ItemID id, int quantity )  ProductDescription desc = catalog.":'
 {"question": "what is nextgen?", "answer": "nextgen.":'
 {"question": "what is nextgen POS?", "answer": "foo.":'
 {"question": "what is the nextgen POS program?", "answer": "getProductDescription( id ); currentSale.":'
 {"question": "what is the nextgen POS program?", "answer": "domain; public class Payment  private Money amount; public Payment( Money cashTendered ) amount = cashTendered;  public Money getAmount()  return amount;   Class ProductCatalog public class ProductCatalog  private MapItemID, ProductDescription> descriptions = new HashMap()ItemID, ProductDescription>; public ProductCatalog()  // sample data ItemID id1 = new ItemID( 100 ); ItemID id2 = new ItemID( 200 ); Money price = new Money( 3 ); ProductDescription desc; desc = new ProductDescription( id1, price, "product 1" ); descriptions.":'
 {"question": "what is the nextgen POS program?", "answer": "get( id );   Class Register public class Register  private ProductCatalog catalog; private Sale currentSale; public Register( ProductCatalog catalog )  this.":'
 {"question": "what is the nextgen POS program?", "answer": "catalog = catalog;  public void endSale()  currentSale.":'
 {"question": "what is the nextgen POS program?", "answer": "put( id2, desc );  public ProductDescription getProductDescription( ItemID id )  return descriptions.":'
 {"question": "what is the price of a sale?", "answer": "description = description;  public ItemID getItemID()  return id;  public Money getPrice()  return price;  public String getDescription()  return description;   Class Sale public class Sale  private ListSalesLineItem> lineItems = new ArrayList()SalesLineItem>; private Date date = new Date(); private boolean isComplete = false; private Payment payment; public Money getBalance()  return payment.":'
 {"question": "what is the price of the item?", "answer": "description = desc; this.":'
 {"question": "what is the price of a product?", "answer": "price = price; this.":'
 {"question": "what is the price of the item?", "answer": "add( new SalesLineItem( desc, quantity ) );  public Money getTotal()  Money total = new Money(); Money subtotal = null; for ( SalesLineItem lineItem : lineItems )  subtotal = lineItem.":'
 {"question": "what is the price of the item?", "answer": "id = id; this.":'
 {"question": "what is the price of the item?", "answer": "makePayment( cashTendered );   Class ProductDescription public class ProductDescription  private ItemID id; private Money price; private String description; public ProductDescription( ItemID id, Money price, String description )  this.":'
 {"question": "what is the value of the value of the value of the value of the value of the value?", "answer": "getAmount().":'
 {"question": "what is the value of the value of the value of the value of the value of the value?", "answer": "minus( getTotal() );  public void becomeComplete()  isComplete = true;  public boolean isComplete()  return isComplete;  public void makeLineItem ( ProductDescription desc, int quantity )  lineItems.":'
 {"question": "what is the price of the item?", "answer": "add( subtotal );  return total;  public void makePayment( Money cashTendered )  payment = new Payment( cashTendered );   Class SalesLineItem public class SalesLineItem  private int quantity; private ProductDescription description; public SalesLineItem (ProductDescription desc, int quantity )  this.":'
 {"question": "what is the value of the value of the value of the value of the value of the value?", "answer": "getSubtotal(); total.":'
 {"question": "what is the price of the item?", "answer": "currentSale.":'
 {"question": "what is a package name?", "answer": "Class Square // all classes are probably in a package named // something like: package com.":'
 {"question": "what is the name of the class?", "answer": "monopoly.":'
 {"question": "what is the purpose of this code?", "answer": "Comments excluded on purpose, in the interest of brevity, as the code is simple.":'
 {"question": "what is the name of the class?", "answer": "domain; public class Square  private String name; private Square nextSquare; private int index; public Square( String name, int index )  this.":'
 {"question": "what is the java monopoly?", "answer": "Iteration-2 will lead to refinements and improvements in this code and design.":'
 {"question": "what is the name of the class?", "answer": "public Money getSubtotal()  return description.":'
 {"question": "what is the location of the public square?", "answer": "location = location;  public Square getLocation()  return location;  public void setLocation(Square location)  this.":'
 {"question": "what is the name of the class?", "answer": "index = index;  public void setNextSquare( Square s )  nextSquare = s;  public Square getNextSquare( )  return nextSquare;  public String getName( )  return name;  public int getIndex()  return index;   Class Piece public class Piece  private Square location; public Piece(Square location)  this.":'
 {"question": "what is the name of the class?", "answer": "foo.":'
 {"question": "what is the name of the class?", "answer": "name = name; this.":'
 {"question": "what is the name of the class?", "answer": "getPrice().":'
 {"question": "what is the location of the public class?", "answer": "location = location;   Class Die public class Die  public static final int MAX = 6; private int faceValue; public Die( )  roll( );  public void roll( )  faceValue = (int) ( ( Math.":'
 {"question": "what is the name of the class?", "answer": "times( quantity );   Class Store public class Store  private ProductCatalog catalog = new ProductCatalog(); private Register register = new Register( catalog ); public Register getRegister()  return register;   Introduction to the Monopoly Program Solution This section presents a sample domain layer of classes in Java for this iteration.":'
 {"question": "what is the square?", "answer": "get(0); Square last = (Square) squares.":'
 {"question": "what is the void buildSquares()?", "answer": "add(s);  private void linkSquares()  for (int i = 0; i  (SIZE - 1); i++)  link(i);  Square first = (Square) squares.":'
 {"question": "what is the square size?", "answer": "get(SIZE - 1); last.":'
 {"question": "what is the square size?", "answer": "getIndex() + distance) % SIZE; return (Square) squares.":'
 {"question": "what is the square?", "answer": "setNextSquare(next);   Class Player public class Player  private String name; private Piece piece; private Board board; private Die[] dice; public Player(String name, Die[] dice, Board board)  this.":'
 {"question": "what is the void buildSquares()?", "answer": "get(0);  private void buildSquares()  for (int i = 1; i = SIZE; i++)  build(i);   private void build(int i)  Square s = new Square("Square " + i, i - 1); squares.":'
 {"question": "what is the square?", "answer": "get(i); Square next = (Square) squares.":'
 {"question": "what is board?", "answer": "board = board; piece = new Piece(board.":'
 {"question": "what is the name of the board?", "answer": "name = name; this.":'
 {"question": "what is the square?", "answer": "dice = dice; this.":'
 {"question": "what is the void link?", "answer": "setNextSquare(first);  private void link(int i)  Square current = (Square) squares.":'
 {"question": "what is the i value?", "answer": "get(i + 1); current.":'
 {"question": "what is the square size?", "answer": "public int getFaceValue( )  return faceValue;   Class Board public class Board  private static final int SIZE = 40; private List squares = new ArrayList(SIZE); public Board()  buildSquares(); linkSquares();  public Square getSquare(Square start, int distance)  int endIndex = (start.":'
 {"question": "what is the square?", "answer": "get(endIndex);  public Square getStartSquare()  return (Square) squares.":'
 {"question": "what is the void takeTurn() function?", "answer": "public void takeTurn()  // roll dice int rollTotal = 0; for (int i = 0; i  dice.":'
 {"question": "what is the void for a game?", "answer": "add( p ); p = new Player( "Car", dice, board ); players.":'
 {"question": "what is the void playGame?", "answer": "add( p );  public void playGame( )  for ( int i = 0; i  ROUNDS_TOTAL; i++ )  playRound();   public List getPlayers( )  return players;  private void playRound( )  for ( Iterator iter = players.":'
 {"question": "what is the void for a game?", "answer": "getLocation(), rollTotal); piece.":'
 {"question": "what is the void for iterator iter?", "answer": "next(); player.":'
 {"question": "what is the void for a piece?", "answer": "getSquare(piece.":'
 {"question": "what is the void for a game?", "answer": "getLocation();  public String getName()  return name;   Class MonopolyGame public class MonopolyGame  private static final int ROUNDS_TOTAL = 20; private static final int PLAYERS_TOTAL = 2; private List players = new ArrayList( PLAYERS_TOTAL ); private Board board = new Board( ); private Die[] dice =  new Die(), new Die() ; public MonopolyGame( )  Player p; p = new Player( "Horse", dice, board ); players.":'
 {"question": "what is the void for a void?", "answer": "getFaceValue();  Square newLoc = board.":'
 {"question": "what is the void takeTurn() function?", "answer": "length; i++)  dice[i].":'
 {"question": "what is the void for iterator iter?", "answer": "hasNext( ); )  Player player = (Player) iter.":'
 {"question": "what is iterator?", "answer": "iterator( ); iter.":'
 {"question": "what is the void for a game?", "answer": "setLocation(newLoc);  public Square getLocation()  return piece.":'
 {"question": "what is the void takeTurn() function?", "answer": "roll(); rollTotal += dice[i].":'
 {"question": "What are the most common metrics used in OO development?", "answer": "The metrics selected, however, are useful in a wide range of models.":'
 {"question": "What are the main characteristics of object-oriented design and development?", "answer": "Object-oriented design and development are popular concepts in today\"s software development environment--some even herald them as the "silver bullet" for solving software problems.":'
 {"question": "What are the main reasons why many software projects failed?", "answer": "• Many software projects failed.":'
 {"question": "What is the definition of OO?", "answer": "Although there is no silver bullet, object-oriented (OO) development has proved its value for systems that must be maintained and modified.":'
 {"question": "What are the main reasons why many software projects failed?", "answer": "• Many software projects late, over budget, providing unreliable software that is expensive to maintain.":'
 {"question": "What is the definition of software quality?", "answer": "To evaluate a metric"s usefulness as a quantitative measure of software quality, it must be based on the measurement of a software quality attribute.":'
 {"question": "What are the key concepts in OO design?", "answer": "Can traditional metrics measure the critical OO structures?":'
 {"question": "What are the concepts of software metrics?", "answer": "The concepts of software metrics are well established, and many metrics relating to product quality have been developed and used.":'
 {"question": "What are the key concepts of OO structures?", "answer": "Which of the many new metrics found in the literature are useful to measure the critical concepts of OO structures?":'
 {"question": "What are the main criteria for evaluating OO software?", "answer": "Metric Evaluation Criteria Traditional functional decomposition metrics and data analysis design metrics measure the design structure or data structure independently.":'
 {"question": "What was the name of the term?", "answer": "All the above attributes of what was called a ‘Software Crisis’.":'
 {"question": "What are the threshold values for OO metrics?", "answer": "If so, are the threshold values for the metrics the same for OO designs as for functional or data designs?":'
 {"question": "What are the main points of the article?", "answer": "Since metrics should never be developed in a void, this article first looks at criteria for the metrics, then discusses specific metrics for object-oriented development, including traditional metrics and metrics developed to measure specific object-oriented structures.":'
 {"question": "What are the key characteristics of OO software?", "answer": "OO software development requires a different approach from more traditional functional decomposition and data flow development methods, including the metrics used to evaluate OO software.":'
 {"question": "When was the term ‘Software Engineering’ first introduced?", "answer": "So the term ‘Software Engineering’ first introduced at a conference in late 1960’s to discuss the software crisis.":'
 {"question": "What are the main characteristics of software quality?", "answer": "Software Quality Metrics for Object-Oriented Environments Object-oriented software development requires a different approach from traditional development methods, including the metrics used to evaluate the software.":'
 {"question": "What are the key concepts and structures in OO design?", "answer": "In this article, we answer the following questions: What concepts and structures in OO design affect the quality of the software?":'
 {"question": "What are the criteria for OO metrics?", "answer": "However, OO metrics must be able to treat function and data as a combined, integrated object.":'
 {"question": "What are the main reasons why many software projects failed?", "answer": "• Many software projects produced software which did not satisfy the requirements of the customer.":'
 {"question": "What are the characteristics of software projects that were over budget?", "answer": "• Complexities of software projects increased as hardware capability increased.":'
 {"question": "What is the most important attribute of the article?", "answer": "• Demand of new software increased faster than ability to generate new software.":'
 {"question": "What are the main reasons why large software projects failed?", "answer": "• Larger software system is more difficult and expensive to maintain.":'
 {"question": "What are the main reasons why OO is becoming popular?", "answer": "With OO analysis and design methods gaining popularity, it is time to start investigating OO metrics with respect to software quality.":'
 {"question": "What are the main reasons why object-oriented analysis and design methods are gaining popularity?", "answer": "With object-oriented analysis and design methods gaining popularity, it is time to investigate object-oriented quality metrics.":'
 {"question": "What is the most important metric in OO?", "answer": "Understandability -- does the design increase the psychological complexity?":'
 {"question": "What are the main characteristics of a metric?", "answer": "Complexity -- could the constructs be used more effectively to decrease the architectural complexity?":'
 {"question": "What is a method?", "answer": "It is an operation upon an object and is defined in the class declaration.":'
 {"question": "What are the main components of OO?", "answer": "The metrics evaluate the OO concepts: methods, classes, cohesion, coupling, and inheritance.":'
 {"question": "What are the main metric used in OO?", "answer": "We support the use of three traditional metrics and present six additional metrics specifically for OO systems.":'
 {"question": "What are the main characteristics of a metric?", "answer": "Reusability -- does the design quality support possible reuse?":'
 {"question": "What are the main characteristics of a metric?", "answer": "Efficiency -- are the constructs efficiently designed?":'
 {"question": "What are the main characteristics of a method?", "answer": "A method is a component of an object that operates on data in response to a message and is defined as part of the declaration of a class.":'
 {"question": "What is the most common metric used to evaluate the complexity of an algorithm?", "answer": "Cyclomatic complexity is used to evaluate the complexity of an algorithm in a method.":'
 {"question": "What are the main characteristics of a metric?", "answer": "Testability and maintainability -- does the structure support ease of testing and changes?":'
 {"question": "What is the purpose of the article?", "answer": "The Software Assurance Technology Center"s (SATC) approach was to select OO metrics that apply to the primary, critical constructs of OO design.":'
 {"question": "What are the main characteristics of the metric?", "answer": "As each metric is presented, we will briefly discuss its applicability.":'
 {"question": "What are the main characteristics of a method?", "answer": "Methods reflect how a problem is broken into segments and the capabilities other classes expect of a given class.":'
 {"question": "What are the main characteristics of a OO system?", "answer": "Because of inheritance, cyclomatic complexity cannot be used to measure the complexity of a class, but the cyclomatic complexity of individual methods can be combined with other measures to evaluate the complexity of the class.":'
 {"question": "What are the suggested metrics for OO?", "answer": "The suggested metrics are supported by most literature and are now found in some OO tools.":'
 {"question": "What are the main reasons to apply traditional metrics when it can be done?", "answer": "However, there are valid reasons to apply traditional metrics when it can be done.":'
 {"question": "What are the main characteristics of a metric?", "answer": "Low cyclomatic complexity methods are generally better, although some are low because decisions are deferred through message passing, not because the method is not complex.":'
 {"question": "What is the metric used to evaluate the complexity of an algorithm?", "answer": "Metric 1: Cyclomatic Complexity.":'
 {"question": "What are the main characteristics of the metric?", "answer": "Each metric is then described, interpretation guidelines given, and the applicable quality attributes listed.":'
 {"question": "What are the main components of OO?", "answer": "The metrics focus on internal object structure, external measures of the interactions among entities, measures of the efficiency of an algorithm and the use of machine resources, and the psychological measures that affect a programmer"s ability to create, comprehend, modify, and maintain software.":'
 {"question": "What are the main characteristics of a OO system?", "answer": "Traditional Metrics Methods In an OO system, traditional metrics are generally applied to the methods that comprise the operations of a class.":'
 {"question": "What are the main issues that are discussed in the article?", "answer": "The SATC has found that there is considerable disagreement in the field about software quality metrics for OO systems, with some who contend that traditional metrics are inappropriate for OO systems.":'
 {"question": "What are the main attributes of a metric?", "answer": "Whether a metric is traditional or new, it must effectively measure one or more of these attributes.":'
 {"question": "What are the main characteristics of the traditional metric?", "answer": "The traditional metrics have been widely used, are well understood by researchers and practitioners, and their relationships to software quality attributes have been validated.":'
 {"question": "What are the main characteristics of a metric?", "answer": "Preceding each metric, a brief description of the OO structure is given.":'
 {"question": "What is the metric used to evaluate the ease of understanding of a method?", "answer": "Size of a method is used to evaluate the ease of understandability of the code by developers and maintainers.":'
 {"question": "What are the metric values for evaluating the size of a method?", "answer": "Thresholds for evaluating the size measures vary, depending on the coding language used and the complexity of the method.":'
 {"question": "What is a class?", "answer": "Classes A class is a template from which objects can be created.":'
 {"question": "What is the metric for a class?", "answer": "This set of objects shares a common structure and a common behavior manifested by the set of methods.":'
 {"question": "What are the OO metrics chosen by the SATC?", "answer": "The OO metrics chosen by the SATC measure principle structures that, if improperly designed, negatively affect the design and code quality attributes.":'
 {"question": "How much is the comment percentage?", "answer": "The SATC found that a comment percentage of about 30 percent is most effective.":'
 {"question": "What are the metric used to evaluate the complexity of a method?", "answer": "These include counting all physical lines of code, the number of statements, and the number of blank lines.":'
 {"question": "What other attributes are related to the complexity quality attribute?", "answer": "Although this metric is specifically applicable to evaluation of the complexity quality attribute, it also is related to all the other attributes Metric 2: Size.":'
 {"question": "What are the different ways to measure size?", "answer": "Size can be measured in a variety of ways.":'
 {"question": "What is the cyclomatic complexity of a method?", "answer": "Generally, the cyclomatic complexity for a method should be below 10, which indicates that decisions are deferred through message passing.":'
 {"question": "What can be done to compute size metrics?", "answer": "The line counts done to compute size metrics can be expanded to include a count of the number of comments, both on line (with code) and standalone.":'
 {"question": "What is the metric for a method?", "answer": "The WMC is a count of the methods implemented within a class or the sum of the complexities of the methods (method complexity is measured by cyclomatic complexity).":'
 {"question": "What is the metric used to evaluate the complexity of a class?", "answer": "Metric 4: Weighted Methods per Class (WMC).":'
 {"question": "What are the three class metrics described here?", "answer": "Three class metrics described here measure the complexity of a class using the class"s methods, messages, and cohesion.":'
 {"question": "What is the metric used to evaluate the complexity of a method?", "answer": "The second measurement is difficult to implement because not all methods are accessible within the class hierarchy because of inheritance.":'
 {"question": "What is the comment percentage?", "answer": "The comment percentage is calculated by the total number of comments divided by the total lines of code less the number of blank lines.":'
 {"question": "Why are comments important?", "answer": "Because comments help developers and maintainers, this metric is used to evaluate the attributes of understandability, reusability, and maintainability OO-Specific Metrics As discussed, many different metrics have been proposed for OO systems.":'
 {"question": "Why are multiple definitions given for some OO metrics?", "answer": "Multiple definitions are given for some of the OO metrics discussed here, because researchers and practitioners have not reached a common definition or counting method.":'
 {"question": "What is the metric for evaluating the complexity of a method?", "answer": "However, because size affects ease of understanding, large-size routines always pose a higher risk in the attributes of understandability, reusability, and maintainability Metric 3: Comment Percentage.":'
 {"question": "What is the metric used to determine the complexity quality of a method?", "answer": "In some cases, the counting method for a metric is determined by the software analysis package used to collect the metrics.":'
 {"question": "What are the OO metrics used to evaluate?", "answer": "The selected OO metrics are primarily applied to the concepts of classes, coupling, and inheritance.":'
 {"question": "What is the metric for cohesion?", "answer": "Any measure of method separateness helps identify flaws in the design of classes.":'
 {"question": "Why do OO designs maximize cohesion?", "answer": "Effective OO designs maximize cohesion because they promote encapsulation.":'
 {"question": "What is the metric for cohesion?", "answer": "LCOM uses data input variables or attributes (structural properties of classes) to measure the degree of similarity between methods.":'
 {"question": "What is the metric for a class?", "answer": "The larger the number of methods in a class, the greater the potential impact on children, since children inherit all of the methods defined in a class.":'
 {"question": "What is the metric for cohesion?", "answer": "This metric evaluates understandability, maintainability, and testability Cohesion Cohesion is the degree to which methods within a class are related to one another and work together to provide well-bounded behavior.":'
 {"question": "What is the metric for a class?", "answer": "The larger the number of methods that can be invoked from a class through messages, the greater the complexity of the class.":'
 {"question": "What is the metric for a class?", "answer": "The number of methods and the complexity of the methods involved is a predictor of how much time and effort is required to develop and maintain the class.":'
 {"question": "What is the metric for cohesion?", "answer": "There are at least two ways to measure cohesion: For each data field in a class, calculate the percentage of methods that use that data field.":'
 {"question": "What is the metric for reusability?", "answer": "This metric measures understandability, reusability, and maintainability Message A message is a request that an object makes of another object to perform an operation.":'
 {"question": "What is the best metric for possible responses?", "answer": "A worst-case value for possible responses assists in the appropriate allocation of testing time.":'
 {"question": "What is the metric for a class?", "answer": "If a large number of methods can be invoked in response to a message, testing and debugging the class requires a greater understanding on the part of the tester.":'
 {"question": "What is the metric for a class?", "answer": "The operation executed as a result of receiving a message is called a method.":'
 {"question": "What is the metric that measures the level of cohesion of methods?", "answer": "Metric 6: Lack of Cohesion of Methods (LCOM).":'
 {"question": "What is the metric for a class?", "answer": "Metric 5: Response for a Class (RFC).":'
 {"question": "What is the next metric?", "answer": "The next metric looks at methods and messages within a class.":'
 {"question": "What is the metric for cohesion?", "answer": "Lower percentages indicate greater data and method cohesion within the class.":'
 {"question": "What is the RFC?", "answer": "The RFC is the cardinality of the set of all methods that can be invoked in response to a message sent to an object of the class or by some method in the class.":'
 {"question": "What is the metric for a class?", "answer": "Classes with large numbers of methods are likely to be more application specific, limiting the possibility of reuse.":'
 {"question": "What is the metric for a class?", "answer": "This includes all methods accessible within the class hierarchy.":'
 {"question": "What is the metric for a class?", "answer": "This metric uses a number of methods to review a combination of a class"s complexity and the amount of communication with other classes.":'
 {"question": "How many methods can be used in a class?", "answer": "Average the percentages, then subtract from 100 percent.":'
 {"question": "What is inheritance?", "answer": "Inheritance is a type of relationship among classes that enables programmers to reuse previously defined objects, including variables and operators.":'
 {"question": "What is the metric for coupling between objects?", "answer": "Classes (objects) are coupled three ways: When a message is passed between objects, the objects are said to be coupled.":'
 {"question": "What is the metric for coupling?", "answer": "Strong coupling complicates a system, since a module is harder to understand, change, or correct by itself if it is interrelated with other modules.":'
 {"question": "What is the metric for coupling between classes?", "answer": "Inheritance decreases complexity by reducing the number of operations and operators, but this abstraction of objects can make maintenance and design difficult.":'
 {"question": "What is the metric for coupling between superclasses and subclasses?", "answer": "Inheritance introduces significant tight coupling between superclasses and their subclasses.":'
 {"question": "What is the metric for coupling between classes?", "answer": "Count the disjoint sets produced from the intersection of the sets of attributes used by the methods.":'
 {"question": "What are the two metric used to measure the amount of inheritance?", "answer": "The two metrics used to measure the amount of inheritance are the depth and breadth of the inheritance hierarchy.":'
 {"question": "What is the metric for coupling between objects?", "answer": "Metric 7: Coupling Between Object Classes (CBO).":'
 {"question": "What is the metric for coupling?", "answer": "The more independent a class, the easier it is to reuse in another application.":'
 {"question": "What is the metric for coupling?", "answer": "The larger the number of couples, the higher the sensitivity to changes in other parts of the design; maintenance is therefore more difficult.":'
 {"question": "What is the metric for coupling between classes?", "answer": "Lack of cohesion or low cohesion increases complexity, thereby increasing the likelihood of errors during development.":'
 {"question": "What is the metric for coupling?", "answer": "Classes with low cohesion could probably be subdivided into two or more subclasses with increased cohesion.":'
 {"question": "How many different classes are used to determine the coupling strength of a class?", "answer": "It is measured by counting the number of distinct noninheritance-related class hierarchies on which a class depends.":'
 {"question": "How can a system be designed to reduce complexity?", "answer": "Complexity can be reduced by designing systems with the weakest possible coupling between modules.":'
 {"question": "What is the difference between methods and methods?", "answer": "Methods are more similar if they operate on the same attributes.":'
 {"question": "What is the best metric for OO?", "answer": "This improves modularity and promotes encapsulation.":'
 {"question": "What is the metric for coupling?", "answer": "Excessive coupling is detrimental to modular design and prevents reuse.":'
 {"question": "What is the metric for coupling between classes?", "answer": "CBO is a count of the number of other classes to which a class is coupled.":'
 {"question": "What is the metric for coupling?", "answer": "Since good OO design requires a balance between coupling and inheritance, coupling measures focus on non-inheritance coupling.":'
 {"question": "What is the best metric for OO?", "answer": "High cohesion indicates good class subdivision.":'
 {"question": "What is the metric for coupling?", "answer": "Inheritance Another design abstraction in OO systems is the use of inheritance.":'
 {"question": "What is the metric for coupling?", "answer": "This metric evaluates efficiency and reusability Coupling Coupling is a measure of the strength of association established by a connection from one entity to another.":'
 {"question": "What does CBO evaluate?", "answer": "CBO evaluates efficiency and reusability.":'
 {"question": "What is the next OO metric?", "answer": "The next OO metric measures coupling strength.":'
 {"question": "What is the metric for coupling between classes?", "answer": "Classes are coupled when methods declared in one class use methods or attributes from the other classes.":'
 {"question": "What is the metric for DIT?", "answer": "Deeper trees constitute greater design complexity, since more methods and classes are involved, but the greater the potential for reuse of inherited methods.":'
 {"question": "What is the depth of a class within the inheritance hierarchy?", "answer": "The depth of a class within the inheritance hierarchy is the maximum length from the class node to the root of the tree, measured by the number of ancestor classes.":'
 {"question": "What is the metric for reusability?", "answer": "The greater the number of children, the greater the likelihood of improper parent abstraction, and it may be an indication of subclassing misuse.":'
 {"question": "What is the depth of inheritance tree?", "answer": "Metric 8: Depth of Inheritance Tree (DIT).":'
 {"question": "What is the metric for the number of children?", "answer": "This metric primarily evaluates efficiency and reuse but also relates to understandability and testability Metric 9: Number of Children (NOC).":'
 {"question": "What is the metric for a class having a large number of children?", "answer": "If a class has a large number of children, it may require more testing of the methods of that class, thus increase the testing time.":'
 {"question": "What is the metric for reusability?", "answer": "But the greater the number of children, the greater the reusability, since inheritance is a form of reuse.":'
 {"question": "What is the number of children in a class?", "answer": "The number of children is the number of immediate subclasses subordinate to a class in the hierarchy.":'
 {"question": "What is the metric for DIT?", "answer": "The deeper a class within the hierarchy, the greater the number of methods it is likely to inherit, making it more complex to predict its behavior.":'
 {"question": "What is the support metric for DIT?", "answer": "A support metric for DIT is the number of methods inherited."}]